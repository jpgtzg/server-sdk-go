// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	time "time"

	internal "github.com/VapiAI/server-sdk-go/internal"
)

type CreateCallDto struct {
	// This is used to issue batch calls to multiple customers.
	//
	// Only relevant for `outboundPhoneCall`. To call a single customer, use `customer` instead.
	Customers []*CreateCustomerDto `json:"customers,omitempty" url:"-"`
	// This is the name of the call. This is just for your own reference.
	Name *string `json:"name,omitempty" url:"-"`
	// This is the schedule plan of the call.
	SchedulePlan *SchedulePlan `json:"schedulePlan,omitempty" url:"-"`
	// This is the transport of the call.
	Transport map[string]interface{} `json:"transport,omitempty" url:"-"`
	// This is the assistant ID that will be used for the call. To use a transient assistant, use `assistant` instead.
	//
	// To start a call with:
	// - Assistant, use `assistantId` or `assistant`
	// - Squad, use `squadId` or `squad`
	// - Workflow, use `workflowId` or `workflow`
	AssistantId *string `json:"assistantId,omitempty" url:"-"`
	// This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.
	//
	// To start a call with:
	// - Assistant, use `assistant`
	// - Squad, use `squad`
	// - Workflow, use `workflow`
	Assistant *CreateAssistantDto `json:"assistant,omitempty" url:"-"`
	// These are the overrides for the `assistant` or `assistantId`'s settings and template variables.
	AssistantOverrides *AssistantOverrides `json:"assistantOverrides,omitempty" url:"-"`
	// This is the squad that will be used for the call. To use a transient squad, use `squad` instead.
	//
	// To start a call with:
	// - Assistant, use `assistant` or `assistantId`
	// - Squad, use `squad` or `squadId`
	// - Workflow, use `workflow` or `workflowId`
	SquadId *string `json:"squadId,omitempty" url:"-"`
	// This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.
	//
	// To start a call with:
	// - Assistant, use `assistant` or `assistantId`
	// - Squad, use `squad` or `squadId`
	// - Workflow, use `workflow` or `workflowId`
	Squad *CreateSquadDto `json:"squad,omitempty" url:"-"`
	// This is the workflow that will be used for the call. To use a transient workflow, use `workflow` instead.
	//
	// To start a call with:
	// - Assistant, use `assistant` or `assistantId`
	// - Squad, use `squad` or `squadId`
	// - Workflow, use `workflow` or `workflowId`
	WorkflowId *string `json:"workflowId,omitempty" url:"-"`
	// This is a workflow that will be used for the call. To use an existing workflow, use `workflowId` instead.
	//
	// To start a call with:
	// - Assistant, use `assistant` or `assistantId`
	// - Squad, use `squad` or `squadId`
	// - Workflow, use `workflow` or `workflowId`
	Workflow *CreateWorkflowDto `json:"workflow,omitempty" url:"-"`
	// These are the overrides for the `workflow` or `workflowId`'s settings and template variables.
	WorkflowOverrides *WorkflowOverrides `json:"workflowOverrides,omitempty" url:"-"`
	// This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.
	//
	// Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
	PhoneNumberId *string `json:"phoneNumberId,omitempty" url:"-"`
	// This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.
	//
	// Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
	PhoneNumber *ImportTwilioPhoneNumberDto `json:"phoneNumber,omitempty" url:"-"`
	// This is the customer that will be called. To call a transient customer , use `customer` instead.
	//
	// Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
	CustomerId *string `json:"customerId,omitempty" url:"-"`
	// This is the customer that will be called. To call an existing customer, use `customerId` instead.
	//
	// Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
	Customer *CreateCustomerDto `json:"customer,omitempty" url:"-"`
}

type CallsListRequest struct {
	// This is the unique identifier for the call.
	Id *string `json:"-" url:"id,omitempty"`
	// This will return calls with the specified assistantId.
	AssistantId *string `json:"-" url:"assistantId,omitempty"`
	// This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.
	//
	// Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
	PhoneNumberId *string `json:"-" url:"phoneNumberId,omitempty"`
	// This is the maximum number of items to return. Defaults to 100.
	Limit *float64 `json:"-" url:"limit,omitempty"`
	// This will return items where the createdAt is greater than the specified value.
	CreatedAtGt *time.Time `json:"-" url:"createdAtGt,omitempty"`
	// This will return items where the createdAt is less than the specified value.
	CreatedAtLt *time.Time `json:"-" url:"createdAtLt,omitempty"`
	// This will return items where the createdAt is greater than or equal to the specified value.
	CreatedAtGe *time.Time `json:"-" url:"createdAtGe,omitempty"`
	// This will return items where the createdAt is less than or equal to the specified value.
	CreatedAtLe *time.Time `json:"-" url:"createdAtLe,omitempty"`
	// This will return items where the updatedAt is greater than the specified value.
	UpdatedAtGt *time.Time `json:"-" url:"updatedAtGt,omitempty"`
	// This will return items where the updatedAt is less than the specified value.
	UpdatedAtLt *time.Time `json:"-" url:"updatedAtLt,omitempty"`
	// This will return items where the updatedAt is greater than or equal to the specified value.
	UpdatedAtGe *time.Time `json:"-" url:"updatedAtGe,omitempty"`
	// This will return items where the updatedAt is less than or equal to the specified value.
	UpdatedAtLe *time.Time `json:"-" url:"updatedAtLe,omitempty"`
}

type Analysis struct {
	// This is the summary of the call. Customize by setting `assistant.analysisPlan.summaryPrompt`.
	Summary *string `json:"summary,omitempty" url:"summary,omitempty"`
	// This is the structured data extracted from the call. Customize by setting `assistant.analysisPlan.structuredDataPrompt` and/or `assistant.analysisPlan.structuredDataSchema`.
	StructuredData map[string]interface{} `json:"structuredData,omitempty" url:"structuredData,omitempty"`
	// This is the structured data catalog of the call. Customize by setting `assistant.analysisPlan.structuredDataMultiPlan`.
	StructuredDataMulti []map[string]interface{} `json:"structuredDataMulti,omitempty" url:"structuredDataMulti,omitempty"`
	// This is the evaluation of the call. Customize by setting `assistant.analysisPlan.successEvaluationPrompt` and/or `assistant.analysisPlan.successEvaluationRubric`.
	SuccessEvaluation *string `json:"successEvaluation,omitempty" url:"successEvaluation,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Analysis) GetSummary() *string {
	if a == nil {
		return nil
	}
	return a.Summary
}

func (a *Analysis) GetStructuredData() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.StructuredData
}

func (a *Analysis) GetStructuredDataMulti() []map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.StructuredDataMulti
}

func (a *Analysis) GetSuccessEvaluation() *string {
	if a == nil {
		return nil
	}
	return a.SuccessEvaluation
}

func (a *Analysis) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Analysis) UnmarshalJSON(data []byte) error {
	type unmarshaler Analysis
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Analysis(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Analysis) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AnalysisCost struct {
	// This is the type of cost, always 'analysis' for this class.
	// This is the type of analysis performed.
	AnalysisType AnalysisCostAnalysisType `json:"analysisType" url:"analysisType"`
	// This is the model that was used to perform the analysis.
	Model map[string]interface{} `json:"model" url:"model"`
	// This is the number of prompt tokens used in the analysis.
	PromptTokens float64 `json:"promptTokens" url:"promptTokens"`
	// This is the number of completion tokens generated in the analysis.
	CompletionTokens float64 `json:"completionTokens" url:"completionTokens"`
	// This is the cost of the component in USD.
	Cost  float64 `json:"cost" url:"cost"`
	type_ string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AnalysisCost) GetAnalysisType() AnalysisCostAnalysisType {
	if a == nil {
		return ""
	}
	return a.AnalysisType
}

func (a *AnalysisCost) GetModel() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Model
}

func (a *AnalysisCost) GetPromptTokens() float64 {
	if a == nil {
		return 0
	}
	return a.PromptTokens
}

func (a *AnalysisCost) GetCompletionTokens() float64 {
	if a == nil {
		return 0
	}
	return a.CompletionTokens
}

func (a *AnalysisCost) GetCost() float64 {
	if a == nil {
		return 0
	}
	return a.Cost
}

func (a *AnalysisCost) Type() string {
	return a.type_
}

func (a *AnalysisCost) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AnalysisCost) UnmarshalJSON(data []byte) error {
	type embed AnalysisCost
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AnalysisCost(unmarshaler.embed)
	if unmarshaler.Type != "analysis" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "analysis", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AnalysisCost) MarshalJSON() ([]byte, error) {
	type embed AnalysisCost
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "analysis",
	}
	return json.Marshal(marshaler)
}

func (a *AnalysisCost) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// This is the type of analysis performed.
type AnalysisCostAnalysisType string

const (
	AnalysisCostAnalysisTypeSummary           AnalysisCostAnalysisType = "summary"
	AnalysisCostAnalysisTypeStructuredData    AnalysisCostAnalysisType = "structuredData"
	AnalysisCostAnalysisTypeSuccessEvaluation AnalysisCostAnalysisType = "successEvaluation"
)

func NewAnalysisCostAnalysisTypeFromString(s string) (AnalysisCostAnalysisType, error) {
	switch s {
	case "summary":
		return AnalysisCostAnalysisTypeSummary, nil
	case "structuredData":
		return AnalysisCostAnalysisTypeStructuredData, nil
	case "successEvaluation":
		return AnalysisCostAnalysisTypeSuccessEvaluation, nil
	}
	var t AnalysisCostAnalysisType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AnalysisCostAnalysisType) Ptr() *AnalysisCostAnalysisType {
	return &a
}

type AnalysisCostBreakdown struct {
	// This is the cost to summarize the call.
	Summary *float64 `json:"summary,omitempty" url:"summary,omitempty"`
	// This is the number of prompt tokens used to summarize the call.
	SummaryPromptTokens *float64 `json:"summaryPromptTokens,omitempty" url:"summaryPromptTokens,omitempty"`
	// This is the number of completion tokens used to summarize the call.
	SummaryCompletionTokens *float64 `json:"summaryCompletionTokens,omitempty" url:"summaryCompletionTokens,omitempty"`
	// This is the cost to extract structured data from the call.
	StructuredData *float64 `json:"structuredData,omitempty" url:"structuredData,omitempty"`
	// This is the number of prompt tokens used to extract structured data from the call.
	StructuredDataPromptTokens *float64 `json:"structuredDataPromptTokens,omitempty" url:"structuredDataPromptTokens,omitempty"`
	// This is the number of completion tokens used to extract structured data from the call.
	StructuredDataCompletionTokens *float64 `json:"structuredDataCompletionTokens,omitempty" url:"structuredDataCompletionTokens,omitempty"`
	// This is the cost to evaluate if the call was successful.
	SuccessEvaluation *float64 `json:"successEvaluation,omitempty" url:"successEvaluation,omitempty"`
	// This is the number of prompt tokens used to evaluate if the call was successful.
	SuccessEvaluationPromptTokens *float64 `json:"successEvaluationPromptTokens,omitempty" url:"successEvaluationPromptTokens,omitempty"`
	// This is the number of completion tokens used to evaluate if the call was successful.
	SuccessEvaluationCompletionTokens *float64 `json:"successEvaluationCompletionTokens,omitempty" url:"successEvaluationCompletionTokens,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AnalysisCostBreakdown) GetSummary() *float64 {
	if a == nil {
		return nil
	}
	return a.Summary
}

func (a *AnalysisCostBreakdown) GetSummaryPromptTokens() *float64 {
	if a == nil {
		return nil
	}
	return a.SummaryPromptTokens
}

func (a *AnalysisCostBreakdown) GetSummaryCompletionTokens() *float64 {
	if a == nil {
		return nil
	}
	return a.SummaryCompletionTokens
}

func (a *AnalysisCostBreakdown) GetStructuredData() *float64 {
	if a == nil {
		return nil
	}
	return a.StructuredData
}

func (a *AnalysisCostBreakdown) GetStructuredDataPromptTokens() *float64 {
	if a == nil {
		return nil
	}
	return a.StructuredDataPromptTokens
}

func (a *AnalysisCostBreakdown) GetStructuredDataCompletionTokens() *float64 {
	if a == nil {
		return nil
	}
	return a.StructuredDataCompletionTokens
}

func (a *AnalysisCostBreakdown) GetSuccessEvaluation() *float64 {
	if a == nil {
		return nil
	}
	return a.SuccessEvaluation
}

func (a *AnalysisCostBreakdown) GetSuccessEvaluationPromptTokens() *float64 {
	if a == nil {
		return nil
	}
	return a.SuccessEvaluationPromptTokens
}

func (a *AnalysisCostBreakdown) GetSuccessEvaluationCompletionTokens() *float64 {
	if a == nil {
		return nil
	}
	return a.SuccessEvaluationCompletionTokens
}

func (a *AnalysisCostBreakdown) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AnalysisCostBreakdown) UnmarshalJSON(data []byte) error {
	type unmarshaler AnalysisCostBreakdown
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AnalysisCostBreakdown(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AnalysisCostBreakdown) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type Call struct {
	// This is the type of call.
	Type *CallType `json:"type,omitempty" url:"type,omitempty"`
	// These are the costs of individual components of the call in USD.
	Costs    []*CallCostsItem    `json:"costs,omitempty" url:"costs,omitempty"`
	Messages []*CallMessagesItem `json:"messages,omitempty" url:"messages,omitempty"`
	// This is the provider of the call.
	//
	// Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
	PhoneCallProvider *CallPhoneCallProvider `json:"phoneCallProvider,omitempty" url:"phoneCallProvider,omitempty"`
	// This is the transport of the phone call.
	//
	// Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
	PhoneCallTransport *CallPhoneCallTransport `json:"phoneCallTransport,omitempty" url:"phoneCallTransport,omitempty"`
	// This is the status of the call.
	Status *CallStatus `json:"status,omitempty" url:"status,omitempty"`
	// This is the explanation for how the call ended.
	EndedReason *CallEndedReason `json:"endedReason,omitempty" url:"endedReason,omitempty"`
	// This is the destination where the call ended up being transferred to. If the call was not transferred, this will be empty.
	Destination *CallDestination `json:"destination,omitempty" url:"destination,omitempty"`
	// This is the unique identifier for the call.
	Id string `json:"id" url:"id"`
	// This is the unique identifier for the org that this call belongs to.
	OrgId string `json:"orgId" url:"orgId"`
	// This is the ISO 8601 date-time string of when the call was created.
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`
	// This is the ISO 8601 date-time string of when the call was last updated.
	UpdatedAt time.Time `json:"updatedAt" url:"updatedAt"`
	// This is the ISO 8601 date-time string of when the call was started.
	StartedAt *time.Time `json:"startedAt,omitempty" url:"startedAt,omitempty"`
	// This is the ISO 8601 date-time string of when the call was ended.
	EndedAt *time.Time `json:"endedAt,omitempty" url:"endedAt,omitempty"`
	// This is the cost of the call in USD.
	Cost *float64 `json:"cost,omitempty" url:"cost,omitempty"`
	// This is the cost of the call in USD.
	CostBreakdown *CostBreakdown `json:"costBreakdown,omitempty" url:"costBreakdown,omitempty"`
	// This is a copy of assistant artifact plan. This isn't actually stored on the call but rather just returned in POST /call/web to enable artifact creation client side.
	ArtifactPlan *ArtifactPlan `json:"artifactPlan,omitempty" url:"artifactPlan,omitempty"`
	// This is the analysis of the call. Configure in `assistant.analysisPlan`.
	Analysis *Analysis `json:"analysis,omitempty" url:"analysis,omitempty"`
	// This is to real-time monitor the call. Configure in `assistant.monitorPlan`.
	Monitor *Monitor `json:"monitor,omitempty" url:"monitor,omitempty"`
	// These are the artifacts created from the call. Configure in `assistant.artifactPlan`.
	Artifact *Artifact `json:"artifact,omitempty" url:"artifact,omitempty"`
	// The ID of the call as provided by the phone number service. callSid in Twilio. conversationUuid in Vonage. callControlId in Telnyx.
	//
	// Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
	PhoneCallProviderId *string `json:"phoneCallProviderId,omitempty" url:"phoneCallProviderId,omitempty"`
	// This is the campaign ID that the call belongs to.
	CampaignId *string `json:"campaignId,omitempty" url:"campaignId,omitempty"`
	// This is the assistant ID that will be used for the call. To use a transient assistant, use `assistant` instead.
	//
	// To start a call with:
	// - Assistant, use `assistantId` or `assistant`
	// - Squad, use `squadId` or `squad`
	// - Workflow, use `workflowId` or `workflow`
	AssistantId *string `json:"assistantId,omitempty" url:"assistantId,omitempty"`
	// This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.
	//
	// To start a call with:
	// - Assistant, use `assistant`
	// - Squad, use `squad`
	// - Workflow, use `workflow`
	Assistant *CreateAssistantDto `json:"assistant,omitempty" url:"assistant,omitempty"`
	// These are the overrides for the `assistant` or `assistantId`'s settings and template variables.
	AssistantOverrides *AssistantOverrides `json:"assistantOverrides,omitempty" url:"assistantOverrides,omitempty"`
	// This is the squad that will be used for the call. To use a transient squad, use `squad` instead.
	//
	// To start a call with:
	// - Assistant, use `assistant` or `assistantId`
	// - Squad, use `squad` or `squadId`
	// - Workflow, use `workflow` or `workflowId`
	SquadId *string `json:"squadId,omitempty" url:"squadId,omitempty"`
	// This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.
	//
	// To start a call with:
	// - Assistant, use `assistant` or `assistantId`
	// - Squad, use `squad` or `squadId`
	// - Workflow, use `workflow` or `workflowId`
	Squad *CreateSquadDto `json:"squad,omitempty" url:"squad,omitempty"`
	// This is the workflow that will be used for the call. To use a transient workflow, use `workflow` instead.
	//
	// To start a call with:
	// - Assistant, use `assistant` or `assistantId`
	// - Squad, use `squad` or `squadId`
	// - Workflow, use `workflow` or `workflowId`
	WorkflowId *string `json:"workflowId,omitempty" url:"workflowId,omitempty"`
	// This is a workflow that will be used for the call. To use an existing workflow, use `workflowId` instead.
	//
	// To start a call with:
	// - Assistant, use `assistant` or `assistantId`
	// - Squad, use `squad` or `squadId`
	// - Workflow, use `workflow` or `workflowId`
	Workflow *CreateWorkflowDto `json:"workflow,omitempty" url:"workflow,omitempty"`
	// These are the overrides for the `workflow` or `workflowId`'s settings and template variables.
	WorkflowOverrides *WorkflowOverrides `json:"workflowOverrides,omitempty" url:"workflowOverrides,omitempty"`
	// This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.
	//
	// Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
	PhoneNumberId *string `json:"phoneNumberId,omitempty" url:"phoneNumberId,omitempty"`
	// This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.
	//
	// Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
	PhoneNumber *ImportTwilioPhoneNumberDto `json:"phoneNumber,omitempty" url:"phoneNumber,omitempty"`
	// This is the customer that will be called. To call a transient customer , use `customer` instead.
	//
	// Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
	CustomerId *string `json:"customerId,omitempty" url:"customerId,omitempty"`
	// This is the customer that will be called. To call an existing customer, use `customerId` instead.
	//
	// Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
	Customer *CreateCustomerDto `json:"customer,omitempty" url:"customer,omitempty"`
	// This is the name of the call. This is just for your own reference.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// This is the schedule plan of the call.
	SchedulePlan *SchedulePlan `json:"schedulePlan,omitempty" url:"schedulePlan,omitempty"`
	// This is the transport of the call.
	Transport map[string]interface{} `json:"transport,omitempty" url:"transport,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Call) GetType() *CallType {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *Call) GetCosts() []*CallCostsItem {
	if c == nil {
		return nil
	}
	return c.Costs
}

func (c *Call) GetMessages() []*CallMessagesItem {
	if c == nil {
		return nil
	}
	return c.Messages
}

func (c *Call) GetPhoneCallProvider() *CallPhoneCallProvider {
	if c == nil {
		return nil
	}
	return c.PhoneCallProvider
}

func (c *Call) GetPhoneCallTransport() *CallPhoneCallTransport {
	if c == nil {
		return nil
	}
	return c.PhoneCallTransport
}

func (c *Call) GetStatus() *CallStatus {
	if c == nil {
		return nil
	}
	return c.Status
}

func (c *Call) GetEndedReason() *CallEndedReason {
	if c == nil {
		return nil
	}
	return c.EndedReason
}

func (c *Call) GetDestination() *CallDestination {
	if c == nil {
		return nil
	}
	return c.Destination
}

func (c *Call) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *Call) GetOrgId() string {
	if c == nil {
		return ""
	}
	return c.OrgId
}

func (c *Call) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *Call) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *Call) GetStartedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.StartedAt
}

func (c *Call) GetEndedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.EndedAt
}

func (c *Call) GetCost() *float64 {
	if c == nil {
		return nil
	}
	return c.Cost
}

func (c *Call) GetCostBreakdown() *CostBreakdown {
	if c == nil {
		return nil
	}
	return c.CostBreakdown
}

func (c *Call) GetArtifactPlan() *ArtifactPlan {
	if c == nil {
		return nil
	}
	return c.ArtifactPlan
}

func (c *Call) GetAnalysis() *Analysis {
	if c == nil {
		return nil
	}
	return c.Analysis
}

func (c *Call) GetMonitor() *Monitor {
	if c == nil {
		return nil
	}
	return c.Monitor
}

func (c *Call) GetArtifact() *Artifact {
	if c == nil {
		return nil
	}
	return c.Artifact
}

func (c *Call) GetPhoneCallProviderId() *string {
	if c == nil {
		return nil
	}
	return c.PhoneCallProviderId
}

func (c *Call) GetCampaignId() *string {
	if c == nil {
		return nil
	}
	return c.CampaignId
}

func (c *Call) GetAssistantId() *string {
	if c == nil {
		return nil
	}
	return c.AssistantId
}

func (c *Call) GetAssistant() *CreateAssistantDto {
	if c == nil {
		return nil
	}
	return c.Assistant
}

func (c *Call) GetAssistantOverrides() *AssistantOverrides {
	if c == nil {
		return nil
	}
	return c.AssistantOverrides
}

func (c *Call) GetSquadId() *string {
	if c == nil {
		return nil
	}
	return c.SquadId
}

func (c *Call) GetSquad() *CreateSquadDto {
	if c == nil {
		return nil
	}
	return c.Squad
}

func (c *Call) GetWorkflowId() *string {
	if c == nil {
		return nil
	}
	return c.WorkflowId
}

func (c *Call) GetWorkflow() *CreateWorkflowDto {
	if c == nil {
		return nil
	}
	return c.Workflow
}

func (c *Call) GetWorkflowOverrides() *WorkflowOverrides {
	if c == nil {
		return nil
	}
	return c.WorkflowOverrides
}

func (c *Call) GetPhoneNumberId() *string {
	if c == nil {
		return nil
	}
	return c.PhoneNumberId
}

func (c *Call) GetPhoneNumber() *ImportTwilioPhoneNumberDto {
	if c == nil {
		return nil
	}
	return c.PhoneNumber
}

func (c *Call) GetCustomerId() *string {
	if c == nil {
		return nil
	}
	return c.CustomerId
}

func (c *Call) GetCustomer() *CreateCustomerDto {
	if c == nil {
		return nil
	}
	return c.Customer
}

func (c *Call) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *Call) GetSchedulePlan() *SchedulePlan {
	if c == nil {
		return nil
	}
	return c.SchedulePlan
}

func (c *Call) GetTransport() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Transport
}

func (c *Call) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Call) UnmarshalJSON(data []byte) error {
	type embed Call
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
		StartedAt *internal.DateTime `json:"startedAt,omitempty"`
		EndedAt   *internal.DateTime `json:"endedAt,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = Call(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	c.StartedAt = unmarshaler.StartedAt.TimePtr()
	c.EndedAt = unmarshaler.EndedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Call) MarshalJSON() ([]byte, error) {
	type embed Call
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
		StartedAt *internal.DateTime `json:"startedAt,omitempty"`
		EndedAt   *internal.DateTime `json:"endedAt,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
		StartedAt: internal.NewOptionalDateTime(c.StartedAt),
		EndedAt:   internal.NewOptionalDateTime(c.EndedAt),
	}
	return json.Marshal(marshaler)
}

func (c *Call) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CallBatchError struct {
	Customer *CreateCustomerDto `json:"customer" url:"customer"`
	Error    string             `json:"error" url:"error"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CallBatchError) GetCustomer() *CreateCustomerDto {
	if c == nil {
		return nil
	}
	return c.Customer
}

func (c *CallBatchError) GetError() string {
	if c == nil {
		return ""
	}
	return c.Error
}

func (c *CallBatchError) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CallBatchError) UnmarshalJSON(data []byte) error {
	type unmarshaler CallBatchError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CallBatchError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CallBatchError) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CallBatchResponse struct {
	// This is the list of calls that were created.
	Results []*Call `json:"results" url:"results"`
	// This is the list of calls that failed to be created.
	Errors []*CallBatchError `json:"errors" url:"errors"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CallBatchResponse) GetResults() []*Call {
	if c == nil {
		return nil
	}
	return c.Results
}

func (c *CallBatchResponse) GetErrors() []*CallBatchError {
	if c == nil {
		return nil
	}
	return c.Errors
}

func (c *CallBatchResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CallBatchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CallBatchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CallBatchResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CallBatchResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CallCostsItem struct {
	TransportCost          *TransportCost
	TranscriberCost        *TranscriberCost
	ModelCost              *ModelCost
	VoiceCost              *VoiceCost
	VapiCost               *VapiCost
	VoicemailDetectionCost *VoicemailDetectionCost
	AnalysisCost           *AnalysisCost
	KnowledgeBaseCost      *KnowledgeBaseCost

	typ string
}

func (c *CallCostsItem) GetTransportCost() *TransportCost {
	if c == nil {
		return nil
	}
	return c.TransportCost
}

func (c *CallCostsItem) GetTranscriberCost() *TranscriberCost {
	if c == nil {
		return nil
	}
	return c.TranscriberCost
}

func (c *CallCostsItem) GetModelCost() *ModelCost {
	if c == nil {
		return nil
	}
	return c.ModelCost
}

func (c *CallCostsItem) GetVoiceCost() *VoiceCost {
	if c == nil {
		return nil
	}
	return c.VoiceCost
}

func (c *CallCostsItem) GetVapiCost() *VapiCost {
	if c == nil {
		return nil
	}
	return c.VapiCost
}

func (c *CallCostsItem) GetVoicemailDetectionCost() *VoicemailDetectionCost {
	if c == nil {
		return nil
	}
	return c.VoicemailDetectionCost
}

func (c *CallCostsItem) GetAnalysisCost() *AnalysisCost {
	if c == nil {
		return nil
	}
	return c.AnalysisCost
}

func (c *CallCostsItem) GetKnowledgeBaseCost() *KnowledgeBaseCost {
	if c == nil {
		return nil
	}
	return c.KnowledgeBaseCost
}

func (c *CallCostsItem) UnmarshalJSON(data []byte) error {
	valueTransportCost := new(TransportCost)
	if err := json.Unmarshal(data, &valueTransportCost); err == nil {
		c.typ = "TransportCost"
		c.TransportCost = valueTransportCost
		return nil
	}
	valueTranscriberCost := new(TranscriberCost)
	if err := json.Unmarshal(data, &valueTranscriberCost); err == nil {
		c.typ = "TranscriberCost"
		c.TranscriberCost = valueTranscriberCost
		return nil
	}
	valueModelCost := new(ModelCost)
	if err := json.Unmarshal(data, &valueModelCost); err == nil {
		c.typ = "ModelCost"
		c.ModelCost = valueModelCost
		return nil
	}
	valueVoiceCost := new(VoiceCost)
	if err := json.Unmarshal(data, &valueVoiceCost); err == nil {
		c.typ = "VoiceCost"
		c.VoiceCost = valueVoiceCost
		return nil
	}
	valueVapiCost := new(VapiCost)
	if err := json.Unmarshal(data, &valueVapiCost); err == nil {
		c.typ = "VapiCost"
		c.VapiCost = valueVapiCost
		return nil
	}
	valueVoicemailDetectionCost := new(VoicemailDetectionCost)
	if err := json.Unmarshal(data, &valueVoicemailDetectionCost); err == nil {
		c.typ = "VoicemailDetectionCost"
		c.VoicemailDetectionCost = valueVoicemailDetectionCost
		return nil
	}
	valueAnalysisCost := new(AnalysisCost)
	if err := json.Unmarshal(data, &valueAnalysisCost); err == nil {
		c.typ = "AnalysisCost"
		c.AnalysisCost = valueAnalysisCost
		return nil
	}
	valueKnowledgeBaseCost := new(KnowledgeBaseCost)
	if err := json.Unmarshal(data, &valueKnowledgeBaseCost); err == nil {
		c.typ = "KnowledgeBaseCost"
		c.KnowledgeBaseCost = valueKnowledgeBaseCost
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CallCostsItem) MarshalJSON() ([]byte, error) {
	if c.typ == "TransportCost" || c.TransportCost != nil {
		return json.Marshal(c.TransportCost)
	}
	if c.typ == "TranscriberCost" || c.TranscriberCost != nil {
		return json.Marshal(c.TranscriberCost)
	}
	if c.typ == "ModelCost" || c.ModelCost != nil {
		return json.Marshal(c.ModelCost)
	}
	if c.typ == "VoiceCost" || c.VoiceCost != nil {
		return json.Marshal(c.VoiceCost)
	}
	if c.typ == "VapiCost" || c.VapiCost != nil {
		return json.Marshal(c.VapiCost)
	}
	if c.typ == "VoicemailDetectionCost" || c.VoicemailDetectionCost != nil {
		return json.Marshal(c.VoicemailDetectionCost)
	}
	if c.typ == "AnalysisCost" || c.AnalysisCost != nil {
		return json.Marshal(c.AnalysisCost)
	}
	if c.typ == "KnowledgeBaseCost" || c.KnowledgeBaseCost != nil {
		return json.Marshal(c.KnowledgeBaseCost)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CallCostsItemVisitor interface {
	VisitTransportCost(*TransportCost) error
	VisitTranscriberCost(*TranscriberCost) error
	VisitModelCost(*ModelCost) error
	VisitVoiceCost(*VoiceCost) error
	VisitVapiCost(*VapiCost) error
	VisitVoicemailDetectionCost(*VoicemailDetectionCost) error
	VisitAnalysisCost(*AnalysisCost) error
	VisitKnowledgeBaseCost(*KnowledgeBaseCost) error
}

func (c *CallCostsItem) Accept(visitor CallCostsItemVisitor) error {
	if c.typ == "TransportCost" || c.TransportCost != nil {
		return visitor.VisitTransportCost(c.TransportCost)
	}
	if c.typ == "TranscriberCost" || c.TranscriberCost != nil {
		return visitor.VisitTranscriberCost(c.TranscriberCost)
	}
	if c.typ == "ModelCost" || c.ModelCost != nil {
		return visitor.VisitModelCost(c.ModelCost)
	}
	if c.typ == "VoiceCost" || c.VoiceCost != nil {
		return visitor.VisitVoiceCost(c.VoiceCost)
	}
	if c.typ == "VapiCost" || c.VapiCost != nil {
		return visitor.VisitVapiCost(c.VapiCost)
	}
	if c.typ == "VoicemailDetectionCost" || c.VoicemailDetectionCost != nil {
		return visitor.VisitVoicemailDetectionCost(c.VoicemailDetectionCost)
	}
	if c.typ == "AnalysisCost" || c.AnalysisCost != nil {
		return visitor.VisitAnalysisCost(c.AnalysisCost)
	}
	if c.typ == "KnowledgeBaseCost" || c.KnowledgeBaseCost != nil {
		return visitor.VisitKnowledgeBaseCost(c.KnowledgeBaseCost)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

// This is the destination where the call ended up being transferred to. If the call was not transferred, this will be empty.
type CallDestination struct {
	TransferDestinationNumber *TransferDestinationNumber
	TransferDestinationSip    *TransferDestinationSip

	typ string
}

func (c *CallDestination) GetTransferDestinationNumber() *TransferDestinationNumber {
	if c == nil {
		return nil
	}
	return c.TransferDestinationNumber
}

func (c *CallDestination) GetTransferDestinationSip() *TransferDestinationSip {
	if c == nil {
		return nil
	}
	return c.TransferDestinationSip
}

func (c *CallDestination) UnmarshalJSON(data []byte) error {
	// First, try to determine the type from the JSON data
	var tempMap map[string]interface{}
	if err := json.Unmarshal(data, &tempMap); err == nil {
		if typeValue, exists := tempMap["type"]; exists {
			if typeStr, ok := typeValue.(string); ok {
				switch typeStr {
				case "number":
					// For transfer responses with type "number", we need to handle the specific structure
					// The API response might include additional fields not in the generated struct
					var transferResponse struct {
						Type                   string                 `json:"type"`
						Number                 string                 `json:"number"`
						Message                interface{}            `json:"message,omitempty"`
						TransferPlan           map[string]interface{} `json:"transferPlan,omitempty"`
						NumberE164CheckEnabled *bool                  `json:"numberE164CheckEnabled,omitempty"`
					}

					if err := json.Unmarshal(data, &transferResponse); err == nil {
						// Create a proper TransferDestinationNumber with the available fields
						transferDest := &TransferDestinationNumber{
							Number: transferResponse.Number,
						}

						// Set optional fields if they exist
						if transferResponse.NumberE164CheckEnabled != nil {
							transferDest.NumberE164CheckEnabled = transferResponse.NumberE164CheckEnabled
						}

						// Handle message field if it exists
						if transferResponse.Message != nil {
							// Try to unmarshal as TransferDestinationNumberMessage
							if messageBytes, err := json.Marshal(transferResponse.Message); err == nil {
								var message TransferDestinationNumberMessage
								if err := json.Unmarshal(messageBytes, &message); err == nil {
									transferDest.Message = &message
								}
							}
						}

						c.typ = "TransferDestinationNumber"
						c.TransferDestinationNumber = transferDest
						return nil
					}
				case "sip":
					// This is a TransferDestinationSip
					valueTransferDestinationSip := new(TransferDestinationSip)
					if err := json.Unmarshal(data, &valueTransferDestinationSip); err == nil {
						c.typ = "TransferDestinationSip"
						c.TransferDestinationSip = valueTransferDestinationSip
						return nil
					}
				}
			}
		}
	}

	// Fallback to the original logic if type field is not present or doesn't match
	valueTransferDestinationNumber := new(TransferDestinationNumber)
	if err := json.Unmarshal(data, &valueTransferDestinationNumber); err == nil {
		c.typ = "TransferDestinationNumber"
		c.TransferDestinationNumber = valueTransferDestinationNumber
		return nil
	}
	valueTransferDestinationSip := new(TransferDestinationSip)
	if err := json.Unmarshal(data, &valueTransferDestinationSip); err == nil {
		c.typ = "TransferDestinationSip"
		c.TransferDestinationSip = valueTransferDestinationSip
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CallDestination) MarshalJSON() ([]byte, error) {
	if c.typ == "TransferDestinationNumber" || c.TransferDestinationNumber != nil {
		return json.Marshal(c.TransferDestinationNumber)
	}
	if c.typ == "TransferDestinationSip" || c.TransferDestinationSip != nil {
		return json.Marshal(c.TransferDestinationSip)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CallDestinationVisitor interface {
	VisitTransferDestinationNumber(*TransferDestinationNumber) error
	VisitTransferDestinationSip(*TransferDestinationSip) error
}

func (c *CallDestination) Accept(visitor CallDestinationVisitor) error {
	if c.typ == "TransferDestinationNumber" || c.TransferDestinationNumber != nil {
		return visitor.VisitTransferDestinationNumber(c.TransferDestinationNumber)
	}
	if c.typ == "TransferDestinationSip" || c.TransferDestinationSip != nil {
		return visitor.VisitTransferDestinationSip(c.TransferDestinationSip)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

// This is the explanation for how the call ended.
type CallEndedReason string

const (
	CallEndedReasonCallStartErrorNeitherAssistantNorServerSet                                                                CallEndedReason = "call-start-error-neither-assistant-nor-server-set"
	CallEndedReasonAssistantRequestFailed                                                                                    CallEndedReason = "assistant-request-failed"
	CallEndedReasonAssistantRequestReturnedError                                                                             CallEndedReason = "assistant-request-returned-error"
	CallEndedReasonAssistantRequestReturnedUnspeakableError                                                                  CallEndedReason = "assistant-request-returned-unspeakable-error"
	CallEndedReasonAssistantRequestReturnedInvalidAssistant                                                                  CallEndedReason = "assistant-request-returned-invalid-assistant"
	CallEndedReasonAssistantRequestReturnedNoAssistant                                                                       CallEndedReason = "assistant-request-returned-no-assistant"
	CallEndedReasonAssistantRequestReturnedForwardingPhoneNumber                                                             CallEndedReason = "assistant-request-returned-forwarding-phone-number"
	CallEndedReasonScheduledCallDeleted                                                                                      CallEndedReason = "scheduled-call-deleted"
	CallEndedReasonCallStartErrorVapifaultGetOrg                                                                             CallEndedReason = "call.start.error-vapifault-get-org"
	CallEndedReasonCallStartErrorVapifaultGetSubscription                                                                    CallEndedReason = "call.start.error-vapifault-get-subscription"
	CallEndedReasonCallStartErrorGetAssistant                                                                                CallEndedReason = "call.start.error-get-assistant"
	CallEndedReasonCallStartErrorGetPhoneNumber                                                                              CallEndedReason = "call.start.error-get-phone-number"
	CallEndedReasonCallStartErrorGetCustomer                                                                                 CallEndedReason = "call.start.error-get-customer"
	CallEndedReasonCallStartErrorGetResourcesValidation                                                                      CallEndedReason = "call.start.error-get-resources-validation"
	CallEndedReasonCallStartErrorVapiNumberInternational                                                                     CallEndedReason = "call.start.error-vapi-number-international"
	CallEndedReasonCallStartErrorVapiNumberOutboundDailyLimit                                                                CallEndedReason = "call.start.error-vapi-number-outbound-daily-limit"
	CallEndedReasonCallStartErrorGetTransport                                                                                CallEndedReason = "call.start.error-get-transport"
	CallEndedReasonCallStartErrorSubscriptionWalletDoesNotExist                                                              CallEndedReason = "call.start.error-subscription-wallet-does-not-exist"
	CallEndedReasonCallStartErrorSubscriptionFrozen                                                                          CallEndedReason = "call.start.error-subscription-frozen"
	CallEndedReasonCallStartErrorSubscriptionInsufficientCredits                                                             CallEndedReason = "call.start.error-subscription-insufficient-credits"
	CallEndedReasonCallStartErrorSubscriptionUpgradeFailed                                                                   CallEndedReason = "call.start.error-subscription-upgrade-failed"
	CallEndedReasonCallStartErrorSubscriptionConcurrencyLimitReached                                                         CallEndedReason = "call.start.error-subscription-concurrency-limit-reached"
	CallEndedReasonAssistantNotValid                                                                                         CallEndedReason = "assistant-not-valid"
	CallEndedReasonDatabaseError                                                                                             CallEndedReason = "database-error"
	CallEndedReasonAssistantNotFound                                                                                         CallEndedReason = "assistant-not-found"
	CallEndedReasonPipelineErrorOpenaiVoiceFailed                                                                            CallEndedReason = "pipeline-error-openai-voice-failed"
	CallEndedReasonPipelineErrorCartesiaVoiceFailed                                                                          CallEndedReason = "pipeline-error-cartesia-voice-failed"
	CallEndedReasonPipelineErrorDeepgramVoiceFailed                                                                          CallEndedReason = "pipeline-error-deepgram-voice-failed"
	CallEndedReasonPipelineErrorElevenLabsVoiceFailed                                                                        CallEndedReason = "pipeline-error-eleven-labs-voice-failed"
	CallEndedReasonPipelineErrorPlayhtVoiceFailed                                                                            CallEndedReason = "pipeline-error-playht-voice-failed"
	CallEndedReasonPipelineErrorLmntVoiceFailed                                                                              CallEndedReason = "pipeline-error-lmnt-voice-failed"
	CallEndedReasonPipelineErrorAzureVoiceFailed                                                                             CallEndedReason = "pipeline-error-azure-voice-failed"
	CallEndedReasonPipelineErrorRimeAiVoiceFailed                                                                            CallEndedReason = "pipeline-error-rime-ai-voice-failed"
	CallEndedReasonPipelineErrorSmallestAiVoiceFailed                                                                        CallEndedReason = "pipeline-error-smallest-ai-voice-failed"
	CallEndedReasonPipelineErrorNeuphonicVoiceFailed                                                                         CallEndedReason = "pipeline-error-neuphonic-voice-failed"
	CallEndedReasonPipelineErrorHumeVoiceFailed                                                                              CallEndedReason = "pipeline-error-hume-voice-failed"
	CallEndedReasonPipelineErrorSesameVoiceFailed                                                                            CallEndedReason = "pipeline-error-sesame-voice-failed"
	CallEndedReasonPipelineErrorInworldVoiceFailed                                                                           CallEndedReason = "pipeline-error-inworld-voice-failed"
	CallEndedReasonPipelineErrorTavusVideoFailed                                                                             CallEndedReason = "pipeline-error-tavus-video-failed"
	CallEndedReasonCallInProgressErrorVapifaultOpenaiVoiceFailed                                                             CallEndedReason = "call.in-progress.error-vapifault-openai-voice-failed"
	CallEndedReasonCallInProgressErrorVapifaultCartesiaVoiceFailed                                                           CallEndedReason = "call.in-progress.error-vapifault-cartesia-voice-failed"
	CallEndedReasonCallInProgressErrorVapifaultDeepgramVoiceFailed                                                           CallEndedReason = "call.in-progress.error-vapifault-deepgram-voice-failed"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsVoiceFailed                                                         CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-voice-failed"
	CallEndedReasonCallInProgressErrorVapifaultPlayhtVoiceFailed                                                             CallEndedReason = "call.in-progress.error-vapifault-playht-voice-failed"
	CallEndedReasonCallInProgressErrorVapifaultLmntVoiceFailed                                                               CallEndedReason = "call.in-progress.error-vapifault-lmnt-voice-failed"
	CallEndedReasonCallInProgressErrorVapifaultAzureVoiceFailed                                                              CallEndedReason = "call.in-progress.error-vapifault-azure-voice-failed"
	CallEndedReasonCallInProgressErrorVapifaultRimeAiVoiceFailed                                                             CallEndedReason = "call.in-progress.error-vapifault-rime-ai-voice-failed"
	CallEndedReasonCallInProgressErrorVapifaultSmallestAiVoiceFailed                                                         CallEndedReason = "call.in-progress.error-vapifault-smallest-ai-voice-failed"
	CallEndedReasonCallInProgressErrorVapifaultNeuphonicVoiceFailed                                                          CallEndedReason = "call.in-progress.error-vapifault-neuphonic-voice-failed"
	CallEndedReasonCallInProgressErrorVapifaultHumeVoiceFailed                                                               CallEndedReason = "call.in-progress.error-vapifault-hume-voice-failed"
	CallEndedReasonCallInProgressErrorVapifaultSesameVoiceFailed                                                             CallEndedReason = "call.in-progress.error-vapifault-sesame-voice-failed"
	CallEndedReasonCallInProgressErrorVapifaultInworldVoiceFailed                                                            CallEndedReason = "call.in-progress.error-vapifault-inworld-voice-failed"
	CallEndedReasonCallInProgressErrorVapifaultTavusVideoFailed                                                              CallEndedReason = "call.in-progress.error-vapifault-tavus-video-failed"
	CallEndedReasonPipelineErrorVapiLlmFailed                                                                                CallEndedReason = "pipeline-error-vapi-llm-failed"
	CallEndedReasonPipelineErrorVapi400BadRequestValidationFailed                                                            CallEndedReason = "pipeline-error-vapi-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorVapi401Unauthorized                                                                          CallEndedReason = "pipeline-error-vapi-401-unauthorized"
	CallEndedReasonPipelineErrorVapi403ModelAccessDenied                                                                     CallEndedReason = "pipeline-error-vapi-403-model-access-denied"
	CallEndedReasonPipelineErrorVapi429ExceededQuota                                                                         CallEndedReason = "pipeline-error-vapi-429-exceeded-quota"
	CallEndedReasonPipelineErrorVapi500ServerError                                                                           CallEndedReason = "pipeline-error-vapi-500-server-error"
	CallEndedReasonPipelineErrorVapi503ServerOverloadedError                                                                 CallEndedReason = "pipeline-error-vapi-503-server-overloaded-error"
	CallEndedReasonCallInProgressErrorVapifaultVapiLlmFailed                                                                 CallEndedReason = "call.in-progress.error-vapifault-vapi-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultVapi400BadRequestValidationFailed                                             CallEndedReason = "call.in-progress.error-vapifault-vapi-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultVapi401Unauthorized                                                           CallEndedReason = "call.in-progress.error-vapifault-vapi-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultVapi403ModelAccessDenied                                                      CallEndedReason = "call.in-progress.error-vapifault-vapi-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultVapi429ExceededQuota                                                          CallEndedReason = "call.in-progress.error-vapifault-vapi-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultVapi500ServerError                                                        CallEndedReason = "call.in-progress.error-providerfault-vapi-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultVapi503ServerOverloadedError                                              CallEndedReason = "call.in-progress.error-providerfault-vapi-503-server-overloaded-error"
	CallEndedReasonPipelineErrorDeepgramTranscriberFailed                                                                    CallEndedReason = "pipeline-error-deepgram-transcriber-failed"
	CallEndedReasonCallInProgressErrorVapifaultDeepgramTranscriberFailed                                                     CallEndedReason = "call.in-progress.error-vapifault-deepgram-transcriber-failed"
	CallEndedReasonPipelineErrorGladiaTranscriberFailed                                                                      CallEndedReason = "pipeline-error-gladia-transcriber-failed"
	CallEndedReasonCallInProgressErrorVapifaultGladiaTranscriberFailed                                                       CallEndedReason = "call.in-progress.error-vapifault-gladia-transcriber-failed"
	CallEndedReasonPipelineErrorSpeechmaticsTranscriberFailed                                                                CallEndedReason = "pipeline-error-speechmatics-transcriber-failed"
	CallEndedReasonCallInProgressErrorVapifaultSpeechmaticsTranscriberFailed                                                 CallEndedReason = "call.in-progress.error-vapifault-speechmatics-transcriber-failed"
	CallEndedReasonPipelineErrorAssemblyAiTranscriberFailed                                                                  CallEndedReason = "pipeline-error-assembly-ai-transcriber-failed"
	CallEndedReasonPipelineErrorAssemblyAiReturning400InsufficentFunds                                                       CallEndedReason = "pipeline-error-assembly-ai-returning-400-insufficent-funds"
	CallEndedReasonPipelineErrorAssemblyAiReturning400PaidOnlyFeature                                                        CallEndedReason = "pipeline-error-assembly-ai-returning-400-paid-only-feature"
	CallEndedReasonPipelineErrorAssemblyAiReturning401InvalidCredentials                                                     CallEndedReason = "pipeline-error-assembly-ai-returning-401-invalid-credentials"
	CallEndedReasonPipelineErrorAssemblyAiReturning500InvalidSchema                                                          CallEndedReason = "pipeline-error-assembly-ai-returning-500-invalid-schema"
	CallEndedReasonPipelineErrorAssemblyAiReturning500WordBoostParsingFailed                                                 CallEndedReason = "pipeline-error-assembly-ai-returning-500-word-boost-parsing-failed"
	CallEndedReasonCallInProgressErrorVapifaultAssemblyAiTranscriberFailed                                                   CallEndedReason = "call.in-progress.error-vapifault-assembly-ai-transcriber-failed"
	CallEndedReasonCallInProgressErrorVapifaultAssemblyAiReturning400InsufficentFunds                                        CallEndedReason = "call.in-progress.error-vapifault-assembly-ai-returning-400-insufficent-funds"
	CallEndedReasonCallInProgressErrorVapifaultAssemblyAiReturning400PaidOnlyFeature                                         CallEndedReason = "call.in-progress.error-vapifault-assembly-ai-returning-400-paid-only-feature"
	CallEndedReasonCallInProgressErrorVapifaultAssemblyAiReturning401InvalidCredentials                                      CallEndedReason = "call.in-progress.error-vapifault-assembly-ai-returning-401-invalid-credentials"
	CallEndedReasonCallInProgressErrorVapifaultAssemblyAiReturning500InvalidSchema                                           CallEndedReason = "call.in-progress.error-vapifault-assembly-ai-returning-500-invalid-schema"
	CallEndedReasonCallInProgressErrorVapifaultAssemblyAiReturning500WordBoostParsingFailed                                  CallEndedReason = "call.in-progress.error-vapifault-assembly-ai-returning-500-word-boost-parsing-failed"
	CallEndedReasonPipelineErrorTalkscriberTranscriberFailed                                                                 CallEndedReason = "pipeline-error-talkscriber-transcriber-failed"
	CallEndedReasonCallInProgressErrorVapifaultTalkscriberTranscriberFailed                                                  CallEndedReason = "call.in-progress.error-vapifault-talkscriber-transcriber-failed"
	CallEndedReasonPipelineErrorAzureSpeechTranscriberFailed                                                                 CallEndedReason = "pipeline-error-azure-speech-transcriber-failed"
	CallEndedReasonCallInProgressErrorVapifaultAzureSpeechTranscriberFailed                                                  CallEndedReason = "call.in-progress.error-vapifault-azure-speech-transcriber-failed"
	CallEndedReasonCallInProgressErrorPipelineNoAvailableLlmModel                                                            CallEndedReason = "call.in-progress.error-pipeline-no-available-llm-model"
	CallEndedReasonWorkerShutdown                                                                                            CallEndedReason = "worker-shutdown"
	CallEndedReasonVonageDisconnected                                                                                        CallEndedReason = "vonage-disconnected"
	CallEndedReasonVonageFailedToConnectCall                                                                                 CallEndedReason = "vonage-failed-to-connect-call"
	CallEndedReasonVonageCompleted                                                                                           CallEndedReason = "vonage-completed"
	CallEndedReasonPhoneCallProviderBypassEnabledButNoCallReceived                                                           CallEndedReason = "phone-call-provider-bypass-enabled-but-no-call-received"
	CallEndedReasonCallInProgressErrorProviderfaultTransportNeverConnected                                                   CallEndedReason = "call.in-progress.error-providerfault-transport-never-connected"
	CallEndedReasonCallInProgressErrorVapifaultWorkerNotAvailable                                                            CallEndedReason = "call.in-progress.error-vapifault-worker-not-available"
	CallEndedReasonCallInProgressErrorVapifaultTransportNeverConnected                                                       CallEndedReason = "call.in-progress.error-vapifault-transport-never-connected"
	CallEndedReasonCallInProgressErrorVapifaultTransportConnectedButCallNotActive                                            CallEndedReason = "call.in-progress.error-vapifault-transport-connected-but-call-not-active"
	CallEndedReasonCallInProgressErrorVapifaultCallStartedButConnectionToTransportMissing                                    CallEndedReason = "call.in-progress.error-vapifault-call-started-but-connection-to-transport-missing"
	CallEndedReasonCallInProgressErrorVapifaultWorkerDied                                                                    CallEndedReason = "call.in-progress.error-vapifault-worker-died"
	CallEndedReasonCallInProgressTwilioCompletedCall                                                                         CallEndedReason = "call.in-progress.twilio-completed-call"
	CallEndedReasonCallInProgressSipCompletedCall                                                                            CallEndedReason = "call.in-progress.sip-completed-call"
	CallEndedReasonCallInProgressErrorVapifaultOpenaiLlmFailed                                                               CallEndedReason = "call.in-progress.error-vapifault-openai-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultAzureOpenaiLlmFailed                                                          CallEndedReason = "call.in-progress.error-vapifault-azure-openai-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultGroqLlmFailed                                                                 CallEndedReason = "call.in-progress.error-vapifault-groq-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultGoogleLlmFailed                                                               CallEndedReason = "call.in-progress.error-vapifault-google-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultXaiLlmFailed                                                                  CallEndedReason = "call.in-progress.error-vapifault-xai-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultMistralLlmFailed                                                              CallEndedReason = "call.in-progress.error-vapifault-mistral-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultInflectionAiLlmFailed                                                         CallEndedReason = "call.in-progress.error-vapifault-inflection-ai-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultCerebrasLlmFailed                                                             CallEndedReason = "call.in-progress.error-vapifault-cerebras-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultDeepSeekLlmFailed                                                             CallEndedReason = "call.in-progress.error-vapifault-deep-seek-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultChatPipelineFailedToStart                                                     CallEndedReason = "call.in-progress.error-vapifault-chat-pipeline-failed-to-start"
	CallEndedReasonPipelineErrorOpenai400BadRequestValidationFailed                                                          CallEndedReason = "pipeline-error-openai-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorOpenai401Unauthorized                                                                        CallEndedReason = "pipeline-error-openai-401-unauthorized"
	CallEndedReasonPipelineErrorOpenai401IncorrectApiKey                                                                     CallEndedReason = "pipeline-error-openai-401-incorrect-api-key"
	CallEndedReasonPipelineErrorOpenai401AccountNotInOrganization                                                            CallEndedReason = "pipeline-error-openai-401-account-not-in-organization"
	CallEndedReasonPipelineErrorOpenai403ModelAccessDenied                                                                   CallEndedReason = "pipeline-error-openai-403-model-access-denied"
	CallEndedReasonPipelineErrorOpenai429ExceededQuota                                                                       CallEndedReason = "pipeline-error-openai-429-exceeded-quota"
	CallEndedReasonPipelineErrorOpenai429RateLimitReached                                                                    CallEndedReason = "pipeline-error-openai-429-rate-limit-reached"
	CallEndedReasonPipelineErrorOpenai500ServerError                                                                         CallEndedReason = "pipeline-error-openai-500-server-error"
	CallEndedReasonPipelineErrorOpenai503ServerOverloadedError                                                               CallEndedReason = "pipeline-error-openai-503-server-overloaded-error"
	CallEndedReasonPipelineErrorOpenaiLlmFailed                                                                              CallEndedReason = "pipeline-error-openai-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultOpenai400BadRequestValidationFailed                                           CallEndedReason = "call.in-progress.error-vapifault-openai-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultOpenai401Unauthorized                                                         CallEndedReason = "call.in-progress.error-vapifault-openai-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultOpenai401IncorrectApiKey                                                      CallEndedReason = "call.in-progress.error-vapifault-openai-401-incorrect-api-key"
	CallEndedReasonCallInProgressErrorVapifaultOpenai401AccountNotInOrganization                                             CallEndedReason = "call.in-progress.error-vapifault-openai-401-account-not-in-organization"
	CallEndedReasonCallInProgressErrorVapifaultOpenai403ModelAccessDenied                                                    CallEndedReason = "call.in-progress.error-vapifault-openai-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultOpenai429ExceededQuota                                                        CallEndedReason = "call.in-progress.error-vapifault-openai-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorVapifaultOpenai429RateLimitReached                                                     CallEndedReason = "call.in-progress.error-vapifault-openai-429-rate-limit-reached"
	CallEndedReasonCallInProgressErrorProviderfaultOpenai500ServerError                                                      CallEndedReason = "call.in-progress.error-providerfault-openai-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultOpenai503ServerOverloadedError                                            CallEndedReason = "call.in-progress.error-providerfault-openai-503-server-overloaded-error"
	CallEndedReasonPipelineErrorAzureOpenai400BadRequestValidationFailed                                                     CallEndedReason = "pipeline-error-azure-openai-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorAzureOpenai401Unauthorized                                                                   CallEndedReason = "pipeline-error-azure-openai-401-unauthorized"
	CallEndedReasonPipelineErrorAzureOpenai403ModelAccessDenied                                                              CallEndedReason = "pipeline-error-azure-openai-403-model-access-denied"
	CallEndedReasonPipelineErrorAzureOpenai429ExceededQuota                                                                  CallEndedReason = "pipeline-error-azure-openai-429-exceeded-quota"
	CallEndedReasonPipelineErrorAzureOpenai500ServerError                                                                    CallEndedReason = "pipeline-error-azure-openai-500-server-error"
	CallEndedReasonPipelineErrorAzureOpenai503ServerOverloadedError                                                          CallEndedReason = "pipeline-error-azure-openai-503-server-overloaded-error"
	CallEndedReasonPipelineErrorAzureOpenaiLlmFailed                                                                         CallEndedReason = "pipeline-error-azure-openai-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultAzureOpenai400BadRequestValidationFailed                                      CallEndedReason = "call.in-progress.error-vapifault-azure-openai-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultAzureOpenai401Unauthorized                                                    CallEndedReason = "call.in-progress.error-vapifault-azure-openai-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultAzureOpenai403ModelAccessDenied                                               CallEndedReason = "call.in-progress.error-vapifault-azure-openai-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultAzureOpenai429ExceededQuota                                                   CallEndedReason = "call.in-progress.error-vapifault-azure-openai-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultAzureOpenai500ServerError                                                 CallEndedReason = "call.in-progress.error-providerfault-azure-openai-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultAzureOpenai503ServerOverloadedError                                       CallEndedReason = "call.in-progress.error-providerfault-azure-openai-503-server-overloaded-error"
	CallEndedReasonPipelineErrorGoogle400BadRequestValidationFailed                                                          CallEndedReason = "pipeline-error-google-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorGoogle401Unauthorized                                                                        CallEndedReason = "pipeline-error-google-401-unauthorized"
	CallEndedReasonPipelineErrorGoogle403ModelAccessDenied                                                                   CallEndedReason = "pipeline-error-google-403-model-access-denied"
	CallEndedReasonPipelineErrorGoogle429ExceededQuota                                                                       CallEndedReason = "pipeline-error-google-429-exceeded-quota"
	CallEndedReasonPipelineErrorGoogle500ServerError                                                                         CallEndedReason = "pipeline-error-google-500-server-error"
	CallEndedReasonPipelineErrorGoogle503ServerOverloadedError                                                               CallEndedReason = "pipeline-error-google-503-server-overloaded-error"
	CallEndedReasonPipelineErrorGoogleLlmFailed                                                                              CallEndedReason = "pipeline-error-google-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultGoogle400BadRequestValidationFailed                                           CallEndedReason = "call.in-progress.error-vapifault-google-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultGoogle401Unauthorized                                                         CallEndedReason = "call.in-progress.error-vapifault-google-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultGoogle403ModelAccessDenied                                                    CallEndedReason = "call.in-progress.error-vapifault-google-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultGoogle429ExceededQuota                                                        CallEndedReason = "call.in-progress.error-vapifault-google-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultGoogle500ServerError                                                      CallEndedReason = "call.in-progress.error-providerfault-google-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultGoogle503ServerOverloadedError                                            CallEndedReason = "call.in-progress.error-providerfault-google-503-server-overloaded-error"
	CallEndedReasonPipelineErrorXai400BadRequestValidationFailed                                                             CallEndedReason = "pipeline-error-xai-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorXai401Unauthorized                                                                           CallEndedReason = "pipeline-error-xai-401-unauthorized"
	CallEndedReasonPipelineErrorXai403ModelAccessDenied                                                                      CallEndedReason = "pipeline-error-xai-403-model-access-denied"
	CallEndedReasonPipelineErrorXai429ExceededQuota                                                                          CallEndedReason = "pipeline-error-xai-429-exceeded-quota"
	CallEndedReasonPipelineErrorXai500ServerError                                                                            CallEndedReason = "pipeline-error-xai-500-server-error"
	CallEndedReasonPipelineErrorXai503ServerOverloadedError                                                                  CallEndedReason = "pipeline-error-xai-503-server-overloaded-error"
	CallEndedReasonPipelineErrorXaiLlmFailed                                                                                 CallEndedReason = "pipeline-error-xai-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultXai400BadRequestValidationFailed                                              CallEndedReason = "call.in-progress.error-vapifault-xai-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultXai401Unauthorized                                                            CallEndedReason = "call.in-progress.error-vapifault-xai-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultXai403ModelAccessDenied                                                       CallEndedReason = "call.in-progress.error-vapifault-xai-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultXai429ExceededQuota                                                           CallEndedReason = "call.in-progress.error-vapifault-xai-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultXai500ServerError                                                         CallEndedReason = "call.in-progress.error-providerfault-xai-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultXai503ServerOverloadedError                                               CallEndedReason = "call.in-progress.error-providerfault-xai-503-server-overloaded-error"
	CallEndedReasonPipelineErrorMistral400BadRequestValidationFailed                                                         CallEndedReason = "pipeline-error-mistral-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorMistral401Unauthorized                                                                       CallEndedReason = "pipeline-error-mistral-401-unauthorized"
	CallEndedReasonPipelineErrorMistral403ModelAccessDenied                                                                  CallEndedReason = "pipeline-error-mistral-403-model-access-denied"
	CallEndedReasonPipelineErrorMistral429ExceededQuota                                                                      CallEndedReason = "pipeline-error-mistral-429-exceeded-quota"
	CallEndedReasonPipelineErrorMistral500ServerError                                                                        CallEndedReason = "pipeline-error-mistral-500-server-error"
	CallEndedReasonPipelineErrorMistral503ServerOverloadedError                                                              CallEndedReason = "pipeline-error-mistral-503-server-overloaded-error"
	CallEndedReasonPipelineErrorMistralLlmFailed                                                                             CallEndedReason = "pipeline-error-mistral-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultMistral400BadRequestValidationFailed                                          CallEndedReason = "call.in-progress.error-vapifault-mistral-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultMistral401Unauthorized                                                        CallEndedReason = "call.in-progress.error-vapifault-mistral-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultMistral403ModelAccessDenied                                                   CallEndedReason = "call.in-progress.error-vapifault-mistral-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultMistral429ExceededQuota                                                       CallEndedReason = "call.in-progress.error-vapifault-mistral-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultMistral500ServerError                                                     CallEndedReason = "call.in-progress.error-providerfault-mistral-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultMistral503ServerOverloadedError                                           CallEndedReason = "call.in-progress.error-providerfault-mistral-503-server-overloaded-error"
	CallEndedReasonPipelineErrorInflectionAi400BadRequestValidationFailed                                                    CallEndedReason = "pipeline-error-inflection-ai-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorInflectionAi401Unauthorized                                                                  CallEndedReason = "pipeline-error-inflection-ai-401-unauthorized"
	CallEndedReasonPipelineErrorInflectionAi403ModelAccessDenied                                                             CallEndedReason = "pipeline-error-inflection-ai-403-model-access-denied"
	CallEndedReasonPipelineErrorInflectionAi429ExceededQuota                                                                 CallEndedReason = "pipeline-error-inflection-ai-429-exceeded-quota"
	CallEndedReasonPipelineErrorInflectionAi500ServerError                                                                   CallEndedReason = "pipeline-error-inflection-ai-500-server-error"
	CallEndedReasonPipelineErrorInflectionAi503ServerOverloadedError                                                         CallEndedReason = "pipeline-error-inflection-ai-503-server-overloaded-error"
	CallEndedReasonPipelineErrorInflectionAiLlmFailed                                                                        CallEndedReason = "pipeline-error-inflection-ai-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultInflectionAi400BadRequestValidationFailed                                     CallEndedReason = "call.in-progress.error-vapifault-inflection-ai-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultInflectionAi401Unauthorized                                                   CallEndedReason = "call.in-progress.error-vapifault-inflection-ai-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultInflectionAi403ModelAccessDenied                                              CallEndedReason = "call.in-progress.error-vapifault-inflection-ai-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultInflectionAi429ExceededQuota                                                  CallEndedReason = "call.in-progress.error-vapifault-inflection-ai-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultInflectionAi500ServerError                                                CallEndedReason = "call.in-progress.error-providerfault-inflection-ai-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultInflectionAi503ServerOverloadedError                                      CallEndedReason = "call.in-progress.error-providerfault-inflection-ai-503-server-overloaded-error"
	CallEndedReasonPipelineErrorDeepSeek400BadRequestValidationFailed                                                        CallEndedReason = "pipeline-error-deep-seek-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorDeepSeek401Unauthorized                                                                      CallEndedReason = "pipeline-error-deep-seek-401-unauthorized"
	CallEndedReasonPipelineErrorDeepSeek403ModelAccessDenied                                                                 CallEndedReason = "pipeline-error-deep-seek-403-model-access-denied"
	CallEndedReasonPipelineErrorDeepSeek429ExceededQuota                                                                     CallEndedReason = "pipeline-error-deep-seek-429-exceeded-quota"
	CallEndedReasonPipelineErrorDeepSeek500ServerError                                                                       CallEndedReason = "pipeline-error-deep-seek-500-server-error"
	CallEndedReasonPipelineErrorDeepSeek503ServerOverloadedError                                                             CallEndedReason = "pipeline-error-deep-seek-503-server-overloaded-error"
	CallEndedReasonPipelineErrorDeepSeekLlmFailed                                                                            CallEndedReason = "pipeline-error-deep-seek-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultDeepSeek400BadRequestValidationFailed                                         CallEndedReason = "call.in-progress.error-vapifault-deep-seek-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultDeepSeek401Unauthorized                                                       CallEndedReason = "call.in-progress.error-vapifault-deep-seek-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultDeepSeek403ModelAccessDenied                                                  CallEndedReason = "call.in-progress.error-vapifault-deep-seek-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultDeepSeek429ExceededQuota                                                      CallEndedReason = "call.in-progress.error-vapifault-deep-seek-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultDeepSeek500ServerError                                                    CallEndedReason = "call.in-progress.error-providerfault-deep-seek-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultDeepSeek503ServerOverloadedError                                          CallEndedReason = "call.in-progress.error-providerfault-deep-seek-503-server-overloaded-error"
	CallEndedReasonPipelineErrorGroq400BadRequestValidationFailed                                                            CallEndedReason = "pipeline-error-groq-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorGroq401Unauthorized                                                                          CallEndedReason = "pipeline-error-groq-401-unauthorized"
	CallEndedReasonPipelineErrorGroq403ModelAccessDenied                                                                     CallEndedReason = "pipeline-error-groq-403-model-access-denied"
	CallEndedReasonPipelineErrorGroq429ExceededQuota                                                                         CallEndedReason = "pipeline-error-groq-429-exceeded-quota"
	CallEndedReasonPipelineErrorGroq500ServerError                                                                           CallEndedReason = "pipeline-error-groq-500-server-error"
	CallEndedReasonPipelineErrorGroq503ServerOverloadedError                                                                 CallEndedReason = "pipeline-error-groq-503-server-overloaded-error"
	CallEndedReasonPipelineErrorGroqLlmFailed                                                                                CallEndedReason = "pipeline-error-groq-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultGroq400BadRequestValidationFailed                                             CallEndedReason = "call.in-progress.error-vapifault-groq-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultGroq401Unauthorized                                                           CallEndedReason = "call.in-progress.error-vapifault-groq-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultGroq403ModelAccessDenied                                                      CallEndedReason = "call.in-progress.error-vapifault-groq-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultGroq429ExceededQuota                                                          CallEndedReason = "call.in-progress.error-vapifault-groq-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultGroq500ServerError                                                        CallEndedReason = "call.in-progress.error-providerfault-groq-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultGroq503ServerOverloadedError                                              CallEndedReason = "call.in-progress.error-providerfault-groq-503-server-overloaded-error"
	CallEndedReasonPipelineErrorCerebras400BadRequestValidationFailed                                                        CallEndedReason = "pipeline-error-cerebras-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorCerebras401Unauthorized                                                                      CallEndedReason = "pipeline-error-cerebras-401-unauthorized"
	CallEndedReasonPipelineErrorCerebras403ModelAccessDenied                                                                 CallEndedReason = "pipeline-error-cerebras-403-model-access-denied"
	CallEndedReasonPipelineErrorCerebras429ExceededQuota                                                                     CallEndedReason = "pipeline-error-cerebras-429-exceeded-quota"
	CallEndedReasonPipelineErrorCerebras500ServerError                                                                       CallEndedReason = "pipeline-error-cerebras-500-server-error"
	CallEndedReasonPipelineErrorCerebras503ServerOverloadedError                                                             CallEndedReason = "pipeline-error-cerebras-503-server-overloaded-error"
	CallEndedReasonPipelineErrorCerebrasLlmFailed                                                                            CallEndedReason = "pipeline-error-cerebras-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultCerebras400BadRequestValidationFailed                                         CallEndedReason = "call.in-progress.error-vapifault-cerebras-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultCerebras401Unauthorized                                                       CallEndedReason = "call.in-progress.error-vapifault-cerebras-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultCerebras403ModelAccessDenied                                                  CallEndedReason = "call.in-progress.error-vapifault-cerebras-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultCerebras429ExceededQuota                                                      CallEndedReason = "call.in-progress.error-vapifault-cerebras-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultCerebras500ServerError                                                    CallEndedReason = "call.in-progress.error-providerfault-cerebras-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultCerebras503ServerOverloadedError                                          CallEndedReason = "call.in-progress.error-providerfault-cerebras-503-server-overloaded-error"
	CallEndedReasonPipelineErrorAnthropic400BadRequestValidationFailed                                                       CallEndedReason = "pipeline-error-anthropic-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorAnthropic401Unauthorized                                                                     CallEndedReason = "pipeline-error-anthropic-401-unauthorized"
	CallEndedReasonPipelineErrorAnthropic403ModelAccessDenied                                                                CallEndedReason = "pipeline-error-anthropic-403-model-access-denied"
	CallEndedReasonPipelineErrorAnthropic429ExceededQuota                                                                    CallEndedReason = "pipeline-error-anthropic-429-exceeded-quota"
	CallEndedReasonPipelineErrorAnthropic500ServerError                                                                      CallEndedReason = "pipeline-error-anthropic-500-server-error"
	CallEndedReasonPipelineErrorAnthropic503ServerOverloadedError                                                            CallEndedReason = "pipeline-error-anthropic-503-server-overloaded-error"
	CallEndedReasonPipelineErrorAnthropicLlmFailed                                                                           CallEndedReason = "pipeline-error-anthropic-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultAnthropicLlmFailed                                                            CallEndedReason = "call.in-progress.error-vapifault-anthropic-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultAnthropic400BadRequestValidationFailed                                        CallEndedReason = "call.in-progress.error-vapifault-anthropic-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultAnthropic401Unauthorized                                                      CallEndedReason = "call.in-progress.error-vapifault-anthropic-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultAnthropic403ModelAccessDenied                                                 CallEndedReason = "call.in-progress.error-vapifault-anthropic-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultAnthropic429ExceededQuota                                                     CallEndedReason = "call.in-progress.error-vapifault-anthropic-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultAnthropic500ServerError                                                   CallEndedReason = "call.in-progress.error-providerfault-anthropic-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultAnthropic503ServerOverloadedError                                         CallEndedReason = "call.in-progress.error-providerfault-anthropic-503-server-overloaded-error"
	CallEndedReasonPipelineErrorAnthropicBedrock400BadRequestValidationFailed                                                CallEndedReason = "pipeline-error-anthropic-bedrock-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorAnthropicBedrock401Unauthorized                                                              CallEndedReason = "pipeline-error-anthropic-bedrock-401-unauthorized"
	CallEndedReasonPipelineErrorAnthropicBedrock403ModelAccessDenied                                                         CallEndedReason = "pipeline-error-anthropic-bedrock-403-model-access-denied"
	CallEndedReasonPipelineErrorAnthropicBedrock429ExceededQuota                                                             CallEndedReason = "pipeline-error-anthropic-bedrock-429-exceeded-quota"
	CallEndedReasonPipelineErrorAnthropicBedrock500ServerError                                                               CallEndedReason = "pipeline-error-anthropic-bedrock-500-server-error"
	CallEndedReasonPipelineErrorAnthropicBedrock503ServerOverloadedError                                                     CallEndedReason = "pipeline-error-anthropic-bedrock-503-server-overloaded-error"
	CallEndedReasonPipelineErrorAnthropicBedrockLlmFailed                                                                    CallEndedReason = "pipeline-error-anthropic-bedrock-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultAnthropicBedrockLlmFailed                                                     CallEndedReason = "call.in-progress.error-vapifault-anthropic-bedrock-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultAnthropicBedrock400BadRequestValidationFailed                                 CallEndedReason = "call.in-progress.error-vapifault-anthropic-bedrock-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultAnthropicBedrock401Unauthorized                                               CallEndedReason = "call.in-progress.error-vapifault-anthropic-bedrock-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultAnthropicBedrock403ModelAccessDenied                                          CallEndedReason = "call.in-progress.error-vapifault-anthropic-bedrock-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultAnthropicBedrock429ExceededQuota                                              CallEndedReason = "call.in-progress.error-vapifault-anthropic-bedrock-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultAnthropicBedrock500ServerError                                            CallEndedReason = "call.in-progress.error-providerfault-anthropic-bedrock-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultAnthropicBedrock503ServerOverloadedError                                  CallEndedReason = "call.in-progress.error-providerfault-anthropic-bedrock-503-server-overloaded-error"
	CallEndedReasonPipelineErrorAnthropicVertex400BadRequestValidationFailed                                                 CallEndedReason = "pipeline-error-anthropic-vertex-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorAnthropicVertex401Unauthorized                                                               CallEndedReason = "pipeline-error-anthropic-vertex-401-unauthorized"
	CallEndedReasonPipelineErrorAnthropicVertex403ModelAccessDenied                                                          CallEndedReason = "pipeline-error-anthropic-vertex-403-model-access-denied"
	CallEndedReasonPipelineErrorAnthropicVertex429ExceededQuota                                                              CallEndedReason = "pipeline-error-anthropic-vertex-429-exceeded-quota"
	CallEndedReasonPipelineErrorAnthropicVertex500ServerError                                                                CallEndedReason = "pipeline-error-anthropic-vertex-500-server-error"
	CallEndedReasonPipelineErrorAnthropicVertex503ServerOverloadedError                                                      CallEndedReason = "pipeline-error-anthropic-vertex-503-server-overloaded-error"
	CallEndedReasonPipelineErrorAnthropicVertexLlmFailed                                                                     CallEndedReason = "pipeline-error-anthropic-vertex-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultAnthropicVertexLlmFailed                                                      CallEndedReason = "call.in-progress.error-vapifault-anthropic-vertex-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultAnthropicVertex400BadRequestValidationFailed                                  CallEndedReason = "call.in-progress.error-vapifault-anthropic-vertex-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultAnthropicVertex401Unauthorized                                                CallEndedReason = "call.in-progress.error-vapifault-anthropic-vertex-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultAnthropicVertex403ModelAccessDenied                                           CallEndedReason = "call.in-progress.error-vapifault-anthropic-vertex-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultAnthropicVertex429ExceededQuota                                               CallEndedReason = "call.in-progress.error-vapifault-anthropic-vertex-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultAnthropicVertex500ServerError                                             CallEndedReason = "call.in-progress.error-providerfault-anthropic-vertex-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultAnthropicVertex503ServerOverloadedError                                   CallEndedReason = "call.in-progress.error-providerfault-anthropic-vertex-503-server-overloaded-error"
	CallEndedReasonPipelineErrorTogetherAi400BadRequestValidationFailed                                                      CallEndedReason = "pipeline-error-together-ai-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorTogetherAi401Unauthorized                                                                    CallEndedReason = "pipeline-error-together-ai-401-unauthorized"
	CallEndedReasonPipelineErrorTogetherAi403ModelAccessDenied                                                               CallEndedReason = "pipeline-error-together-ai-403-model-access-denied"
	CallEndedReasonPipelineErrorTogetherAi429ExceededQuota                                                                   CallEndedReason = "pipeline-error-together-ai-429-exceeded-quota"
	CallEndedReasonPipelineErrorTogetherAi500ServerError                                                                     CallEndedReason = "pipeline-error-together-ai-500-server-error"
	CallEndedReasonPipelineErrorTogetherAi503ServerOverloadedError                                                           CallEndedReason = "pipeline-error-together-ai-503-server-overloaded-error"
	CallEndedReasonPipelineErrorTogetherAiLlmFailed                                                                          CallEndedReason = "pipeline-error-together-ai-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultTogetherAiLlmFailed                                                           CallEndedReason = "call.in-progress.error-vapifault-together-ai-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultTogetherAi400BadRequestValidationFailed                                       CallEndedReason = "call.in-progress.error-vapifault-together-ai-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultTogetherAi401Unauthorized                                                     CallEndedReason = "call.in-progress.error-vapifault-together-ai-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultTogetherAi403ModelAccessDenied                                                CallEndedReason = "call.in-progress.error-vapifault-together-ai-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultTogetherAi429ExceededQuota                                                    CallEndedReason = "call.in-progress.error-vapifault-together-ai-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultTogetherAi500ServerError                                                  CallEndedReason = "call.in-progress.error-providerfault-together-ai-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultTogetherAi503ServerOverloadedError                                        CallEndedReason = "call.in-progress.error-providerfault-together-ai-503-server-overloaded-error"
	CallEndedReasonPipelineErrorAnyscale400BadRequestValidationFailed                                                        CallEndedReason = "pipeline-error-anyscale-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorAnyscale401Unauthorized                                                                      CallEndedReason = "pipeline-error-anyscale-401-unauthorized"
	CallEndedReasonPipelineErrorAnyscale403ModelAccessDenied                                                                 CallEndedReason = "pipeline-error-anyscale-403-model-access-denied"
	CallEndedReasonPipelineErrorAnyscale429ExceededQuota                                                                     CallEndedReason = "pipeline-error-anyscale-429-exceeded-quota"
	CallEndedReasonPipelineErrorAnyscale500ServerError                                                                       CallEndedReason = "pipeline-error-anyscale-500-server-error"
	CallEndedReasonPipelineErrorAnyscale503ServerOverloadedError                                                             CallEndedReason = "pipeline-error-anyscale-503-server-overloaded-error"
	CallEndedReasonPipelineErrorAnyscaleLlmFailed                                                                            CallEndedReason = "pipeline-error-anyscale-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultAnyscaleLlmFailed                                                             CallEndedReason = "call.in-progress.error-vapifault-anyscale-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultAnyscale400BadRequestValidationFailed                                         CallEndedReason = "call.in-progress.error-vapifault-anyscale-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultAnyscale401Unauthorized                                                       CallEndedReason = "call.in-progress.error-vapifault-anyscale-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultAnyscale403ModelAccessDenied                                                  CallEndedReason = "call.in-progress.error-vapifault-anyscale-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultAnyscale429ExceededQuota                                                      CallEndedReason = "call.in-progress.error-vapifault-anyscale-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultAnyscale500ServerError                                                    CallEndedReason = "call.in-progress.error-providerfault-anyscale-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultAnyscale503ServerOverloadedError                                          CallEndedReason = "call.in-progress.error-providerfault-anyscale-503-server-overloaded-error"
	CallEndedReasonPipelineErrorOpenrouter400BadRequestValidationFailed                                                      CallEndedReason = "pipeline-error-openrouter-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorOpenrouter401Unauthorized                                                                    CallEndedReason = "pipeline-error-openrouter-401-unauthorized"
	CallEndedReasonPipelineErrorOpenrouter403ModelAccessDenied                                                               CallEndedReason = "pipeline-error-openrouter-403-model-access-denied"
	CallEndedReasonPipelineErrorOpenrouter429ExceededQuota                                                                   CallEndedReason = "pipeline-error-openrouter-429-exceeded-quota"
	CallEndedReasonPipelineErrorOpenrouter500ServerError                                                                     CallEndedReason = "pipeline-error-openrouter-500-server-error"
	CallEndedReasonPipelineErrorOpenrouter503ServerOverloadedError                                                           CallEndedReason = "pipeline-error-openrouter-503-server-overloaded-error"
	CallEndedReasonPipelineErrorOpenrouterLlmFailed                                                                          CallEndedReason = "pipeline-error-openrouter-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultOpenrouterLlmFailed                                                           CallEndedReason = "call.in-progress.error-vapifault-openrouter-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultOpenrouter400BadRequestValidationFailed                                       CallEndedReason = "call.in-progress.error-vapifault-openrouter-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultOpenrouter401Unauthorized                                                     CallEndedReason = "call.in-progress.error-vapifault-openrouter-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultOpenrouter403ModelAccessDenied                                                CallEndedReason = "call.in-progress.error-vapifault-openrouter-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultOpenrouter429ExceededQuota                                                    CallEndedReason = "call.in-progress.error-vapifault-openrouter-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultOpenrouter500ServerError                                                  CallEndedReason = "call.in-progress.error-providerfault-openrouter-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultOpenrouter503ServerOverloadedError                                        CallEndedReason = "call.in-progress.error-providerfault-openrouter-503-server-overloaded-error"
	CallEndedReasonPipelineErrorPerplexityAi400BadRequestValidationFailed                                                    CallEndedReason = "pipeline-error-perplexity-ai-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorPerplexityAi401Unauthorized                                                                  CallEndedReason = "pipeline-error-perplexity-ai-401-unauthorized"
	CallEndedReasonPipelineErrorPerplexityAi403ModelAccessDenied                                                             CallEndedReason = "pipeline-error-perplexity-ai-403-model-access-denied"
	CallEndedReasonPipelineErrorPerplexityAi429ExceededQuota                                                                 CallEndedReason = "pipeline-error-perplexity-ai-429-exceeded-quota"
	CallEndedReasonPipelineErrorPerplexityAi500ServerError                                                                   CallEndedReason = "pipeline-error-perplexity-ai-500-server-error"
	CallEndedReasonPipelineErrorPerplexityAi503ServerOverloadedError                                                         CallEndedReason = "pipeline-error-perplexity-ai-503-server-overloaded-error"
	CallEndedReasonPipelineErrorPerplexityAiLlmFailed                                                                        CallEndedReason = "pipeline-error-perplexity-ai-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultPerplexityAiLlmFailed                                                         CallEndedReason = "call.in-progress.error-vapifault-perplexity-ai-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultPerplexityAi400BadRequestValidationFailed                                     CallEndedReason = "call.in-progress.error-vapifault-perplexity-ai-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultPerplexityAi401Unauthorized                                                   CallEndedReason = "call.in-progress.error-vapifault-perplexity-ai-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultPerplexityAi403ModelAccessDenied                                              CallEndedReason = "call.in-progress.error-vapifault-perplexity-ai-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultPerplexityAi429ExceededQuota                                                  CallEndedReason = "call.in-progress.error-vapifault-perplexity-ai-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultPerplexityAi500ServerError                                                CallEndedReason = "call.in-progress.error-providerfault-perplexity-ai-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultPerplexityAi503ServerOverloadedError                                      CallEndedReason = "call.in-progress.error-providerfault-perplexity-ai-503-server-overloaded-error"
	CallEndedReasonPipelineErrorDeepinfra400BadRequestValidationFailed                                                       CallEndedReason = "pipeline-error-deepinfra-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorDeepinfra401Unauthorized                                                                     CallEndedReason = "pipeline-error-deepinfra-401-unauthorized"
	CallEndedReasonPipelineErrorDeepinfra403ModelAccessDenied                                                                CallEndedReason = "pipeline-error-deepinfra-403-model-access-denied"
	CallEndedReasonPipelineErrorDeepinfra429ExceededQuota                                                                    CallEndedReason = "pipeline-error-deepinfra-429-exceeded-quota"
	CallEndedReasonPipelineErrorDeepinfra500ServerError                                                                      CallEndedReason = "pipeline-error-deepinfra-500-server-error"
	CallEndedReasonPipelineErrorDeepinfra503ServerOverloadedError                                                            CallEndedReason = "pipeline-error-deepinfra-503-server-overloaded-error"
	CallEndedReasonPipelineErrorDeepinfraLlmFailed                                                                           CallEndedReason = "pipeline-error-deepinfra-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultDeepinfraLlmFailed                                                            CallEndedReason = "call.in-progress.error-vapifault-deepinfra-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultDeepinfra400BadRequestValidationFailed                                        CallEndedReason = "call.in-progress.error-vapifault-deepinfra-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultDeepinfra401Unauthorized                                                      CallEndedReason = "call.in-progress.error-vapifault-deepinfra-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultDeepinfra403ModelAccessDenied                                                 CallEndedReason = "call.in-progress.error-vapifault-deepinfra-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultDeepinfra429ExceededQuota                                                     CallEndedReason = "call.in-progress.error-vapifault-deepinfra-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultDeepinfra500ServerError                                                   CallEndedReason = "call.in-progress.error-providerfault-deepinfra-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultDeepinfra503ServerOverloadedError                                         CallEndedReason = "call.in-progress.error-providerfault-deepinfra-503-server-overloaded-error"
	CallEndedReasonPipelineErrorRunpod400BadRequestValidationFailed                                                          CallEndedReason = "pipeline-error-runpod-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorRunpod401Unauthorized                                                                        CallEndedReason = "pipeline-error-runpod-401-unauthorized"
	CallEndedReasonPipelineErrorRunpod403ModelAccessDenied                                                                   CallEndedReason = "pipeline-error-runpod-403-model-access-denied"
	CallEndedReasonPipelineErrorRunpod429ExceededQuota                                                                       CallEndedReason = "pipeline-error-runpod-429-exceeded-quota"
	CallEndedReasonPipelineErrorRunpod500ServerError                                                                         CallEndedReason = "pipeline-error-runpod-500-server-error"
	CallEndedReasonPipelineErrorRunpod503ServerOverloadedError                                                               CallEndedReason = "pipeline-error-runpod-503-server-overloaded-error"
	CallEndedReasonPipelineErrorRunpodLlmFailed                                                                              CallEndedReason = "pipeline-error-runpod-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultRunpodLlmFailed                                                               CallEndedReason = "call.in-progress.error-vapifault-runpod-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultRunpod400BadRequestValidationFailed                                           CallEndedReason = "call.in-progress.error-vapifault-runpod-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultRunpod401Unauthorized                                                         CallEndedReason = "call.in-progress.error-vapifault-runpod-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultRunpod403ModelAccessDenied                                                    CallEndedReason = "call.in-progress.error-vapifault-runpod-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultRunpod429ExceededQuota                                                        CallEndedReason = "call.in-progress.error-vapifault-runpod-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultRunpod500ServerError                                                      CallEndedReason = "call.in-progress.error-providerfault-runpod-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultRunpod503ServerOverloadedError                                            CallEndedReason = "call.in-progress.error-providerfault-runpod-503-server-overloaded-error"
	CallEndedReasonPipelineErrorCustomLlm400BadRequestValidationFailed                                                       CallEndedReason = "pipeline-error-custom-llm-400-bad-request-validation-failed"
	CallEndedReasonPipelineErrorCustomLlm401Unauthorized                                                                     CallEndedReason = "pipeline-error-custom-llm-401-unauthorized"
	CallEndedReasonPipelineErrorCustomLlm403ModelAccessDenied                                                                CallEndedReason = "pipeline-error-custom-llm-403-model-access-denied"
	CallEndedReasonPipelineErrorCustomLlm429ExceededQuota                                                                    CallEndedReason = "pipeline-error-custom-llm-429-exceeded-quota"
	CallEndedReasonPipelineErrorCustomLlm500ServerError                                                                      CallEndedReason = "pipeline-error-custom-llm-500-server-error"
	CallEndedReasonPipelineErrorCustomLlm503ServerOverloadedError                                                            CallEndedReason = "pipeline-error-custom-llm-503-server-overloaded-error"
	CallEndedReasonPipelineErrorCustomLlmLlmFailed                                                                           CallEndedReason = "pipeline-error-custom-llm-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultCustomLlmLlmFailed                                                            CallEndedReason = "call.in-progress.error-vapifault-custom-llm-llm-failed"
	CallEndedReasonCallInProgressErrorVapifaultCustomLlm400BadRequestValidationFailed                                        CallEndedReason = "call.in-progress.error-vapifault-custom-llm-400-bad-request-validation-failed"
	CallEndedReasonCallInProgressErrorVapifaultCustomLlm401Unauthorized                                                      CallEndedReason = "call.in-progress.error-vapifault-custom-llm-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultCustomLlm403ModelAccessDenied                                                 CallEndedReason = "call.in-progress.error-vapifault-custom-llm-403-model-access-denied"
	CallEndedReasonCallInProgressErrorVapifaultCustomLlm429ExceededQuota                                                     CallEndedReason = "call.in-progress.error-vapifault-custom-llm-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultCustomLlm500ServerError                                                   CallEndedReason = "call.in-progress.error-providerfault-custom-llm-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultCustomLlm503ServerOverloadedError                                         CallEndedReason = "call.in-progress.error-providerfault-custom-llm-503-server-overloaded-error"
	CallEndedReasonPipelineErrorCustomVoiceFailed                                                                            CallEndedReason = "pipeline-error-custom-voice-failed"
	CallEndedReasonPipelineErrorCartesiaSocketHangUp                                                                         CallEndedReason = "pipeline-error-cartesia-socket-hang-up"
	CallEndedReasonPipelineErrorCartesiaRequestedPayment                                                                     CallEndedReason = "pipeline-error-cartesia-requested-payment"
	CallEndedReasonPipelineErrorCartesia500ServerError                                                                       CallEndedReason = "pipeline-error-cartesia-500-server-error"
	CallEndedReasonPipelineErrorCartesia502ServerError                                                                       CallEndedReason = "pipeline-error-cartesia-502-server-error"
	CallEndedReasonPipelineErrorCartesia503ServerError                                                                       CallEndedReason = "pipeline-error-cartesia-503-server-error"
	CallEndedReasonPipelineErrorCartesia522ServerError                                                                       CallEndedReason = "pipeline-error-cartesia-522-server-error"
	CallEndedReasonCallInProgressErrorVapifaultCartesiaSocketHangUp                                                          CallEndedReason = "call.in-progress.error-vapifault-cartesia-socket-hang-up"
	CallEndedReasonCallInProgressErrorVapifaultCartesiaRequestedPayment                                                      CallEndedReason = "call.in-progress.error-vapifault-cartesia-requested-payment"
	CallEndedReasonCallInProgressErrorProviderfaultCartesia500ServerError                                                    CallEndedReason = "call.in-progress.error-providerfault-cartesia-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultCartesia503ServerError                                                    CallEndedReason = "call.in-progress.error-providerfault-cartesia-503-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultCartesia522ServerError                                                    CallEndedReason = "call.in-progress.error-providerfault-cartesia-522-server-error"
	CallEndedReasonPipelineErrorElevenLabsVoiceNotFound                                                                      CallEndedReason = "pipeline-error-eleven-labs-voice-not-found"
	CallEndedReasonPipelineErrorElevenLabsQuotaExceeded                                                                      CallEndedReason = "pipeline-error-eleven-labs-quota-exceeded"
	CallEndedReasonPipelineErrorElevenLabsUnauthorizedAccess                                                                 CallEndedReason = "pipeline-error-eleven-labs-unauthorized-access"
	CallEndedReasonPipelineErrorElevenLabsUnauthorizedToAccessModel                                                          CallEndedReason = "pipeline-error-eleven-labs-unauthorized-to-access-model"
	CallEndedReasonPipelineErrorElevenLabsProfessionalVoicesOnlyForCreatorPlus                                               CallEndedReason = "pipeline-error-eleven-labs-professional-voices-only-for-creator-plus"
	CallEndedReasonPipelineErrorElevenLabsBlockedFreePlanAndRequestedUpgrade                                                 CallEndedReason = "pipeline-error-eleven-labs-blocked-free-plan-and-requested-upgrade"
	CallEndedReasonPipelineErrorElevenLabsBlockedConcurrentRequestsAndRequestedUpgrade                                       CallEndedReason = "pipeline-error-eleven-labs-blocked-concurrent-requests-and-requested-upgrade"
	CallEndedReasonPipelineErrorElevenLabsBlockedUsingInstantVoiceCloneAndRequestedUpgrade                                   CallEndedReason = "pipeline-error-eleven-labs-blocked-using-instant-voice-clone-and-requested-upgrade"
	CallEndedReasonPipelineErrorElevenLabsSystemBusyAndRequestedUpgrade                                                      CallEndedReason = "pipeline-error-eleven-labs-system-busy-and-requested-upgrade"
	CallEndedReasonPipelineErrorElevenLabsVoiceNotFineTuned                                                                  CallEndedReason = "pipeline-error-eleven-labs-voice-not-fine-tuned"
	CallEndedReasonPipelineErrorElevenLabsInvalidApiKey                                                                      CallEndedReason = "pipeline-error-eleven-labs-invalid-api-key"
	CallEndedReasonPipelineErrorElevenLabsInvalidVoiceSamples                                                                CallEndedReason = "pipeline-error-eleven-labs-invalid-voice-samples"
	CallEndedReasonPipelineErrorElevenLabsVoiceDisabledByOwner                                                               CallEndedReason = "pipeline-error-eleven-labs-voice-disabled-by-owner"
	CallEndedReasonPipelineErrorElevenLabsVapiVoiceDisabledByOwner                                                           CallEndedReason = "pipeline-error-eleven-labs-vapi-voice-disabled-by-owner"
	CallEndedReasonPipelineErrorElevenLabsBlockedAccountInProbation                                                          CallEndedReason = "pipeline-error-eleven-labs-blocked-account-in-probation"
	CallEndedReasonPipelineErrorElevenLabsBlockedContentAgainstTheirPolicy                                                   CallEndedReason = "pipeline-error-eleven-labs-blocked-content-against-their-policy"
	CallEndedReasonPipelineErrorElevenLabsMissingSamplesForVoiceClone                                                        CallEndedReason = "pipeline-error-eleven-labs-missing-samples-for-voice-clone"
	CallEndedReasonPipelineErrorElevenLabsVoiceNotFineTunedAndCannotBeUsed                                                   CallEndedReason = "pipeline-error-eleven-labs-voice-not-fine-tuned-and-cannot-be-used"
	CallEndedReasonPipelineErrorElevenLabsVoiceNotAllowedForFreeUsers                                                        CallEndedReason = "pipeline-error-eleven-labs-voice-not-allowed-for-free-users"
	CallEndedReasonPipelineErrorElevenLabsMaxCharacterLimitExceeded                                                          CallEndedReason = "pipeline-error-eleven-labs-max-character-limit-exceeded"
	CallEndedReasonPipelineErrorElevenLabsBlockedVoicePotentiallyAgainstTermsOfServiceAndAwaitingVerification                CallEndedReason = "pipeline-error-eleven-labs-blocked-voice-potentially-against-terms-of-service-and-awaiting-verification"
	CallEndedReasonPipelineErrorElevenLabs500ServerError                                                                     CallEndedReason = "pipeline-error-eleven-labs-500-server-error"
	CallEndedReasonPipelineErrorElevenLabs503ServerError                                                                     CallEndedReason = "pipeline-error-eleven-labs-503-server-error"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsVoiceNotFound                                                       CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-voice-not-found"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsQuotaExceeded                                                       CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-quota-exceeded"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsUnauthorizedAccess                                                  CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-unauthorized-access"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsUnauthorizedToAccessModel                                           CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-unauthorized-to-access-model"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsProfessionalVoicesOnlyForCreatorPlus                                CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-professional-voices-only-for-creator-plus"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsBlockedFreePlanAndRequestedUpgrade                                  CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-blocked-free-plan-and-requested-upgrade"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsBlockedConcurrentRequestsAndRequestedUpgrade                        CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-blocked-concurrent-requests-and-requested-upgrade"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsBlockedUsingInstantVoiceCloneAndRequestedUpgrade                    CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-blocked-using-instant-voice-clone-and-requested-upgrade"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsSystemBusyAndRequestedUpgrade                                       CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-system-busy-and-requested-upgrade"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsVoiceNotFineTuned                                                   CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-voice-not-fine-tuned"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsInvalidApiKey                                                       CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-invalid-api-key"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsInvalidVoiceSamples                                                 CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-invalid-voice-samples"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsVoiceDisabledByOwner                                                CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-voice-disabled-by-owner"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsBlockedAccountInProbation                                           CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-blocked-account-in-probation"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsBlockedContentAgainstTheirPolicy                                    CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-blocked-content-against-their-policy"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsMissingSamplesForVoiceClone                                         CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-missing-samples-for-voice-clone"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsVoiceNotFineTunedAndCannotBeUsed                                    CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-voice-not-fine-tuned-and-cannot-be-used"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsVoiceNotAllowedForFreeUsers                                         CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-voice-not-allowed-for-free-users"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsMaxCharacterLimitExceeded                                           CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-max-character-limit-exceeded"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsBlockedVoicePotentiallyAgainstTermsOfServiceAndAwaitingVerification CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-blocked-voice-potentially-against-terms-of-service-and-awaiting-verification"
	CallEndedReasonCallInProgressErrorProviderfaultElevenLabs500ServerError                                                  CallEndedReason = "call.in-progress.error-providerfault-eleven-labs-500-server-error"
	CallEndedReasonCallInProgressErrorProviderfaultElevenLabs503ServerError                                                  CallEndedReason = "call.in-progress.error-providerfault-eleven-labs-503-server-error"
	CallEndedReasonPipelineErrorPlayhtRequestTimedOut                                                                        CallEndedReason = "pipeline-error-playht-request-timed-out"
	CallEndedReasonPipelineErrorPlayhtInvalidVoice                                                                           CallEndedReason = "pipeline-error-playht-invalid-voice"
	CallEndedReasonPipelineErrorPlayhtUnexpectedError                                                                        CallEndedReason = "pipeline-error-playht-unexpected-error"
	CallEndedReasonPipelineErrorPlayhtOutOfCredits                                                                           CallEndedReason = "pipeline-error-playht-out-of-credits"
	CallEndedReasonPipelineErrorPlayhtInvalidEmotion                                                                         CallEndedReason = "pipeline-error-playht-invalid-emotion"
	CallEndedReasonPipelineErrorPlayhtVoiceMustBeAValidVoiceManifestUri                                                      CallEndedReason = "pipeline-error-playht-voice-must-be-a-valid-voice-manifest-uri"
	CallEndedReasonPipelineErrorPlayht401Unauthorized                                                                        CallEndedReason = "pipeline-error-playht-401-unauthorized"
	CallEndedReasonPipelineErrorPlayht403ForbiddenOutOfCharacters                                                            CallEndedReason = "pipeline-error-playht-403-forbidden-out-of-characters"
	CallEndedReasonPipelineErrorPlayht403ForbiddenApiAccessNotAvailable                                                      CallEndedReason = "pipeline-error-playht-403-forbidden-api-access-not-available"
	CallEndedReasonPipelineErrorPlayht429ExceededQuota                                                                       CallEndedReason = "pipeline-error-playht-429-exceeded-quota"
	CallEndedReasonPipelineErrorPlayht502GatewayError                                                                        CallEndedReason = "pipeline-error-playht-502-gateway-error"
	CallEndedReasonPipelineErrorPlayht504GatewayError                                                                        CallEndedReason = "pipeline-error-playht-504-gateway-error"
	CallEndedReasonCallInProgressErrorVapifaultPlayhtRequestTimedOut                                                         CallEndedReason = "call.in-progress.error-vapifault-playht-request-timed-out"
	CallEndedReasonCallInProgressErrorVapifaultPlayhtInvalidVoice                                                            CallEndedReason = "call.in-progress.error-vapifault-playht-invalid-voice"
	CallEndedReasonCallInProgressErrorVapifaultPlayhtUnexpectedError                                                         CallEndedReason = "call.in-progress.error-vapifault-playht-unexpected-error"
	CallEndedReasonCallInProgressErrorVapifaultPlayhtOutOfCredits                                                            CallEndedReason = "call.in-progress.error-vapifault-playht-out-of-credits"
	CallEndedReasonCallInProgressErrorVapifaultPlayhtInvalidEmotion                                                          CallEndedReason = "call.in-progress.error-vapifault-playht-invalid-emotion"
	CallEndedReasonCallInProgressErrorVapifaultPlayhtVoiceMustBeAValidVoiceManifestUri                                       CallEndedReason = "call.in-progress.error-vapifault-playht-voice-must-be-a-valid-voice-manifest-uri"
	CallEndedReasonCallInProgressErrorVapifaultPlayht401Unauthorized                                                         CallEndedReason = "call.in-progress.error-vapifault-playht-401-unauthorized"
	CallEndedReasonCallInProgressErrorVapifaultPlayht403ForbiddenOutOfCharacters                                             CallEndedReason = "call.in-progress.error-vapifault-playht-403-forbidden-out-of-characters"
	CallEndedReasonCallInProgressErrorVapifaultPlayht403ForbiddenApiAccessNotAvailable                                       CallEndedReason = "call.in-progress.error-vapifault-playht-403-forbidden-api-access-not-available"
	CallEndedReasonCallInProgressErrorVapifaultPlayht429ExceededQuota                                                        CallEndedReason = "call.in-progress.error-vapifault-playht-429-exceeded-quota"
	CallEndedReasonCallInProgressErrorProviderfaultPlayht502GatewayError                                                     CallEndedReason = "call.in-progress.error-providerfault-playht-502-gateway-error"
	CallEndedReasonCallInProgressErrorProviderfaultPlayht504GatewayError                                                     CallEndedReason = "call.in-progress.error-providerfault-playht-504-gateway-error"
	CallEndedReasonPipelineErrorCustomTranscriberFailed                                                                      CallEndedReason = "pipeline-error-custom-transcriber-failed"
	CallEndedReasonCallInProgressErrorVapifaultCustomTranscriberFailed                                                       CallEndedReason = "call.in-progress.error-vapifault-custom-transcriber-failed"
	CallEndedReasonPipelineErrorElevenLabsTranscriberFailed                                                                  CallEndedReason = "pipeline-error-eleven-labs-transcriber-failed"
	CallEndedReasonCallInProgressErrorVapifaultElevenLabsTranscriberFailed                                                   CallEndedReason = "call.in-progress.error-vapifault-eleven-labs-transcriber-failed"
	CallEndedReasonPipelineErrorDeepgramReturning400NoSuchModelLanguageTierCombination                                       CallEndedReason = "pipeline-error-deepgram-returning-400-no-such-model-language-tier-combination"
	CallEndedReasonPipelineErrorDeepgramReturning401InvalidCredentials                                                       CallEndedReason = "pipeline-error-deepgram-returning-401-invalid-credentials"
	CallEndedReasonPipelineErrorDeepgramReturning403ModelAccessDenied                                                        CallEndedReason = "pipeline-error-deepgram-returning-403-model-access-denied"
	CallEndedReasonPipelineErrorDeepgramReturning404NotFound                                                                 CallEndedReason = "pipeline-error-deepgram-returning-404-not-found"
	CallEndedReasonPipelineErrorDeepgramReturning500InvalidJson                                                              CallEndedReason = "pipeline-error-deepgram-returning-500-invalid-json"
	CallEndedReasonPipelineErrorDeepgramReturning502NetworkError                                                             CallEndedReason = "pipeline-error-deepgram-returning-502-network-error"
	CallEndedReasonPipelineErrorDeepgramReturning502BadGatewayEhostunreach                                                   CallEndedReason = "pipeline-error-deepgram-returning-502-bad-gateway-ehostunreach"
	CallEndedReasonPipelineErrorDeepgramReturningEconnreset                                                                  CallEndedReason = "pipeline-error-deepgram-returning-econnreset"
	CallEndedReasonCallInProgressErrorVapifaultDeepgramReturning400NoSuchModelLanguageTierCombination                        CallEndedReason = "call.in-progress.error-vapifault-deepgram-returning-400-no-such-model-language-tier-combination"
	CallEndedReasonCallInProgressErrorVapifaultDeepgramReturning401InvalidCredentials                                        CallEndedReason = "call.in-progress.error-vapifault-deepgram-returning-401-invalid-credentials"
	CallEndedReasonCallInProgressErrorVapifaultDeepgramReturning404NotFound                                                  CallEndedReason = "call.in-progress.error-vapifault-deepgram-returning-404-not-found"
	CallEndedReasonCallInProgressErrorVapifaultDeepgramReturning403ModelAccessDenied                                         CallEndedReason = "call.in-progress.error-vapifault-deepgram-returning-403-model-access-denied"
	CallEndedReasonCallInProgressErrorProviderfaultDeepgramReturning500InvalidJson                                           CallEndedReason = "call.in-progress.error-providerfault-deepgram-returning-500-invalid-json"
	CallEndedReasonCallInProgressErrorProviderfaultDeepgramReturning502NetworkError                                          CallEndedReason = "call.in-progress.error-providerfault-deepgram-returning-502-network-error"
	CallEndedReasonCallInProgressErrorProviderfaultDeepgramReturning502BadGatewayEhostunreach                                CallEndedReason = "call.in-progress.error-providerfault-deepgram-returning-502-bad-gateway-ehostunreach"
	CallEndedReasonPipelineErrorGoogleTranscriberFailed                                                                      CallEndedReason = "pipeline-error-google-transcriber-failed"
	CallEndedReasonCallInProgressErrorVapifaultGoogleTranscriberFailed                                                       CallEndedReason = "call.in-progress.error-vapifault-google-transcriber-failed"
	CallEndedReasonPipelineErrorOpenaiTranscriberFailed                                                                      CallEndedReason = "pipeline-error-openai-transcriber-failed"
	CallEndedReasonCallInProgressErrorVapifaultOpenaiTranscriberFailed                                                       CallEndedReason = "call.in-progress.error-vapifault-openai-transcriber-failed"
	CallEndedReasonAssistantEndedCall                                                                                        CallEndedReason = "assistant-ended-call"
	CallEndedReasonAssistantSaidEndCallPhrase                                                                                CallEndedReason = "assistant-said-end-call-phrase"
	CallEndedReasonAssistantEndedCallWithHangupTask                                                                          CallEndedReason = "assistant-ended-call-with-hangup-task"
	CallEndedReasonAssistantEndedCallAfterMessageSpoken                                                                      CallEndedReason = "assistant-ended-call-after-message-spoken"
	CallEndedReasonAssistantForwardedCall                                                                                    CallEndedReason = "assistant-forwarded-call"
	CallEndedReasonAssistantJoinTimedOut                                                                                     CallEndedReason = "assistant-join-timed-out"
	CallEndedReasonCallInProgressErrorAssistantDidNotReceiveCustomerAudio                                                    CallEndedReason = "call.in-progress.error-assistant-did-not-receive-customer-audio"
	CallEndedReasonCallInProgressErrorTransferFailed                                                                         CallEndedReason = "call.in-progress.error-transfer-failed"
	CallEndedReasonCustomerBusy                                                                                              CallEndedReason = "customer-busy"
	CallEndedReasonCustomerEndedCall                                                                                         CallEndedReason = "customer-ended-call"
	CallEndedReasonCustomerDidNotAnswer                                                                                      CallEndedReason = "customer-did-not-answer"
	CallEndedReasonCustomerDidNotGiveMicrophonePermission                                                                    CallEndedReason = "customer-did-not-give-microphone-permission"
	CallEndedReasonExceededMaxDuration                                                                                       CallEndedReason = "exceeded-max-duration"
	CallEndedReasonManuallyCanceled                                                                                          CallEndedReason = "manually-canceled"
	CallEndedReasonPhoneCallProviderClosedWebsocket                                                                          CallEndedReason = "phone-call-provider-closed-websocket"
	CallEndedReasonCallForwardingOperatorBusy                                                                                CallEndedReason = "call.forwarding.operator-busy"
	CallEndedReasonSilenceTimedOut                                                                                           CallEndedReason = "silence-timed-out"
	CallEndedReasonCallInProgressErrorSipInboundCallFailedToConnect                                                          CallEndedReason = "call.in-progress.error-sip-inbound-call-failed-to-connect"
	CallEndedReasonCallInProgressErrorProviderfaultOutboundSip403Forbidden                                                   CallEndedReason = "call.in-progress.error-providerfault-outbound-sip-403-forbidden"
	CallEndedReasonCallInProgressErrorProviderfaultOutboundSip407ProxyAuthenticationRequired                                 CallEndedReason = "call.in-progress.error-providerfault-outbound-sip-407-proxy-authentication-required"
	CallEndedReasonCallInProgressErrorProviderfaultOutboundSip503ServiceUnavailable                                          CallEndedReason = "call.in-progress.error-providerfault-outbound-sip-503-service-unavailable"
	CallEndedReasonCallInProgressErrorProviderfaultOutboundSip480TemporarilyUnavailable                                      CallEndedReason = "call.in-progress.error-providerfault-outbound-sip-480-temporarily-unavailable"
	CallEndedReasonCallInProgressErrorSipOutboundCallFailedToConnect                                                         CallEndedReason = "call.in-progress.error-sip-outbound-call-failed-to-connect"
	CallEndedReasonCallRingingHookExecutedSay                                                                                CallEndedReason = "call.ringing.hook-executed-say"
	CallEndedReasonCallRingingHookExecutedTransfer                                                                           CallEndedReason = "call.ringing.hook-executed-transfer"
	CallEndedReasonCallRingingSipInboundCallerHungupBeforeCallConnect                                                        CallEndedReason = "call.ringing.sip-inbound-caller-hungup-before-call-connect"
	CallEndedReasonCallRingingErrorSipInboundCallFailedToConnect                                                             CallEndedReason = "call.ringing.error-sip-inbound-call-failed-to-connect"
	CallEndedReasonTwilioFailedToConnectCall                                                                                 CallEndedReason = "twilio-failed-to-connect-call"
	CallEndedReasonTwilioReportedCustomerMisdialed                                                                           CallEndedReason = "twilio-reported-customer-misdialed"
	CallEndedReasonVonageRejected                                                                                            CallEndedReason = "vonage-rejected"
	CallEndedReasonVoicemail                                                                                                 CallEndedReason = "voicemail"
)

func NewCallEndedReasonFromString(s string) (CallEndedReason, error) {
	switch s {
	case "call-start-error-neither-assistant-nor-server-set":
		return CallEndedReasonCallStartErrorNeitherAssistantNorServerSet, nil
	case "assistant-request-failed":
		return CallEndedReasonAssistantRequestFailed, nil
	case "assistant-request-returned-error":
		return CallEndedReasonAssistantRequestReturnedError, nil
	case "assistant-request-returned-unspeakable-error":
		return CallEndedReasonAssistantRequestReturnedUnspeakableError, nil
	case "assistant-request-returned-invalid-assistant":
		return CallEndedReasonAssistantRequestReturnedInvalidAssistant, nil
	case "assistant-request-returned-no-assistant":
		return CallEndedReasonAssistantRequestReturnedNoAssistant, nil
	case "assistant-request-returned-forwarding-phone-number":
		return CallEndedReasonAssistantRequestReturnedForwardingPhoneNumber, nil
	case "scheduled-call-deleted":
		return CallEndedReasonScheduledCallDeleted, nil
	case "call.start.error-vapifault-get-org":
		return CallEndedReasonCallStartErrorVapifaultGetOrg, nil
	case "call.start.error-vapifault-get-subscription":
		return CallEndedReasonCallStartErrorVapifaultGetSubscription, nil
	case "call.start.error-get-assistant":
		return CallEndedReasonCallStartErrorGetAssistant, nil
	case "call.start.error-get-phone-number":
		return CallEndedReasonCallStartErrorGetPhoneNumber, nil
	case "call.start.error-get-customer":
		return CallEndedReasonCallStartErrorGetCustomer, nil
	case "call.start.error-get-resources-validation":
		return CallEndedReasonCallStartErrorGetResourcesValidation, nil
	case "call.start.error-vapi-number-international":
		return CallEndedReasonCallStartErrorVapiNumberInternational, nil
	case "call.start.error-vapi-number-outbound-daily-limit":
		return CallEndedReasonCallStartErrorVapiNumberOutboundDailyLimit, nil
	case "call.start.error-get-transport":
		return CallEndedReasonCallStartErrorGetTransport, nil
	case "call.start.error-subscription-wallet-does-not-exist":
		return CallEndedReasonCallStartErrorSubscriptionWalletDoesNotExist, nil
	case "call.start.error-subscription-frozen":
		return CallEndedReasonCallStartErrorSubscriptionFrozen, nil
	case "call.start.error-subscription-insufficient-credits":
		return CallEndedReasonCallStartErrorSubscriptionInsufficientCredits, nil
	case "call.start.error-subscription-upgrade-failed":
		return CallEndedReasonCallStartErrorSubscriptionUpgradeFailed, nil
	case "call.start.error-subscription-concurrency-limit-reached":
		return CallEndedReasonCallStartErrorSubscriptionConcurrencyLimitReached, nil
	case "assistant-not-valid":
		return CallEndedReasonAssistantNotValid, nil
	case "database-error":
		return CallEndedReasonDatabaseError, nil
	case "assistant-not-found":
		return CallEndedReasonAssistantNotFound, nil
	case "pipeline-error-openai-voice-failed":
		return CallEndedReasonPipelineErrorOpenaiVoiceFailed, nil
	case "pipeline-error-cartesia-voice-failed":
		return CallEndedReasonPipelineErrorCartesiaVoiceFailed, nil
	case "pipeline-error-deepgram-voice-failed":
		return CallEndedReasonPipelineErrorDeepgramVoiceFailed, nil
	case "pipeline-error-eleven-labs-voice-failed":
		return CallEndedReasonPipelineErrorElevenLabsVoiceFailed, nil
	case "pipeline-error-playht-voice-failed":
		return CallEndedReasonPipelineErrorPlayhtVoiceFailed, nil
	case "pipeline-error-lmnt-voice-failed":
		return CallEndedReasonPipelineErrorLmntVoiceFailed, nil
	case "pipeline-error-azure-voice-failed":
		return CallEndedReasonPipelineErrorAzureVoiceFailed, nil
	case "pipeline-error-rime-ai-voice-failed":
		return CallEndedReasonPipelineErrorRimeAiVoiceFailed, nil
	case "pipeline-error-smallest-ai-voice-failed":
		return CallEndedReasonPipelineErrorSmallestAiVoiceFailed, nil
	case "pipeline-error-neuphonic-voice-failed":
		return CallEndedReasonPipelineErrorNeuphonicVoiceFailed, nil
	case "pipeline-error-hume-voice-failed":
		return CallEndedReasonPipelineErrorHumeVoiceFailed, nil
	case "pipeline-error-sesame-voice-failed":
		return CallEndedReasonPipelineErrorSesameVoiceFailed, nil
	case "pipeline-error-inworld-voice-failed":
		return CallEndedReasonPipelineErrorInworldVoiceFailed, nil
	case "pipeline-error-tavus-video-failed":
		return CallEndedReasonPipelineErrorTavusVideoFailed, nil
	case "call.in-progress.error-vapifault-openai-voice-failed":
		return CallEndedReasonCallInProgressErrorVapifaultOpenaiVoiceFailed, nil
	case "call.in-progress.error-vapifault-cartesia-voice-failed":
		return CallEndedReasonCallInProgressErrorVapifaultCartesiaVoiceFailed, nil
	case "call.in-progress.error-vapifault-deepgram-voice-failed":
		return CallEndedReasonCallInProgressErrorVapifaultDeepgramVoiceFailed, nil
	case "call.in-progress.error-vapifault-eleven-labs-voice-failed":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsVoiceFailed, nil
	case "call.in-progress.error-vapifault-playht-voice-failed":
		return CallEndedReasonCallInProgressErrorVapifaultPlayhtVoiceFailed, nil
	case "call.in-progress.error-vapifault-lmnt-voice-failed":
		return CallEndedReasonCallInProgressErrorVapifaultLmntVoiceFailed, nil
	case "call.in-progress.error-vapifault-azure-voice-failed":
		return CallEndedReasonCallInProgressErrorVapifaultAzureVoiceFailed, nil
	case "call.in-progress.error-vapifault-rime-ai-voice-failed":
		return CallEndedReasonCallInProgressErrorVapifaultRimeAiVoiceFailed, nil
	case "call.in-progress.error-vapifault-smallest-ai-voice-failed":
		return CallEndedReasonCallInProgressErrorVapifaultSmallestAiVoiceFailed, nil
	case "call.in-progress.error-vapifault-neuphonic-voice-failed":
		return CallEndedReasonCallInProgressErrorVapifaultNeuphonicVoiceFailed, nil
	case "call.in-progress.error-vapifault-hume-voice-failed":
		return CallEndedReasonCallInProgressErrorVapifaultHumeVoiceFailed, nil
	case "call.in-progress.error-vapifault-sesame-voice-failed":
		return CallEndedReasonCallInProgressErrorVapifaultSesameVoiceFailed, nil
	case "call.in-progress.error-vapifault-inworld-voice-failed":
		return CallEndedReasonCallInProgressErrorVapifaultInworldVoiceFailed, nil
	case "call.in-progress.error-vapifault-tavus-video-failed":
		return CallEndedReasonCallInProgressErrorVapifaultTavusVideoFailed, nil
	case "pipeline-error-vapi-llm-failed":
		return CallEndedReasonPipelineErrorVapiLlmFailed, nil
	case "pipeline-error-vapi-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorVapi400BadRequestValidationFailed, nil
	case "pipeline-error-vapi-401-unauthorized":
		return CallEndedReasonPipelineErrorVapi401Unauthorized, nil
	case "pipeline-error-vapi-403-model-access-denied":
		return CallEndedReasonPipelineErrorVapi403ModelAccessDenied, nil
	case "pipeline-error-vapi-429-exceeded-quota":
		return CallEndedReasonPipelineErrorVapi429ExceededQuota, nil
	case "pipeline-error-vapi-500-server-error":
		return CallEndedReasonPipelineErrorVapi500ServerError, nil
	case "pipeline-error-vapi-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorVapi503ServerOverloadedError, nil
	case "call.in-progress.error-vapifault-vapi-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultVapiLlmFailed, nil
	case "call.in-progress.error-vapifault-vapi-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultVapi400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-vapi-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultVapi401Unauthorized, nil
	case "call.in-progress.error-vapifault-vapi-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultVapi403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-vapi-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultVapi429ExceededQuota, nil
	case "call.in-progress.error-providerfault-vapi-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultVapi500ServerError, nil
	case "call.in-progress.error-providerfault-vapi-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultVapi503ServerOverloadedError, nil
	case "pipeline-error-deepgram-transcriber-failed":
		return CallEndedReasonPipelineErrorDeepgramTranscriberFailed, nil
	case "call.in-progress.error-vapifault-deepgram-transcriber-failed":
		return CallEndedReasonCallInProgressErrorVapifaultDeepgramTranscriberFailed, nil
	case "pipeline-error-gladia-transcriber-failed":
		return CallEndedReasonPipelineErrorGladiaTranscriberFailed, nil
	case "call.in-progress.error-vapifault-gladia-transcriber-failed":
		return CallEndedReasonCallInProgressErrorVapifaultGladiaTranscriberFailed, nil
	case "pipeline-error-speechmatics-transcriber-failed":
		return CallEndedReasonPipelineErrorSpeechmaticsTranscriberFailed, nil
	case "call.in-progress.error-vapifault-speechmatics-transcriber-failed":
		return CallEndedReasonCallInProgressErrorVapifaultSpeechmaticsTranscriberFailed, nil
	case "pipeline-error-assembly-ai-transcriber-failed":
		return CallEndedReasonPipelineErrorAssemblyAiTranscriberFailed, nil
	case "pipeline-error-assembly-ai-returning-400-insufficent-funds":
		return CallEndedReasonPipelineErrorAssemblyAiReturning400InsufficentFunds, nil
	case "pipeline-error-assembly-ai-returning-400-paid-only-feature":
		return CallEndedReasonPipelineErrorAssemblyAiReturning400PaidOnlyFeature, nil
	case "pipeline-error-assembly-ai-returning-401-invalid-credentials":
		return CallEndedReasonPipelineErrorAssemblyAiReturning401InvalidCredentials, nil
	case "pipeline-error-assembly-ai-returning-500-invalid-schema":
		return CallEndedReasonPipelineErrorAssemblyAiReturning500InvalidSchema, nil
	case "pipeline-error-assembly-ai-returning-500-word-boost-parsing-failed":
		return CallEndedReasonPipelineErrorAssemblyAiReturning500WordBoostParsingFailed, nil
	case "call.in-progress.error-vapifault-assembly-ai-transcriber-failed":
		return CallEndedReasonCallInProgressErrorVapifaultAssemblyAiTranscriberFailed, nil
	case "call.in-progress.error-vapifault-assembly-ai-returning-400-insufficent-funds":
		return CallEndedReasonCallInProgressErrorVapifaultAssemblyAiReturning400InsufficentFunds, nil
	case "call.in-progress.error-vapifault-assembly-ai-returning-400-paid-only-feature":
		return CallEndedReasonCallInProgressErrorVapifaultAssemblyAiReturning400PaidOnlyFeature, nil
	case "call.in-progress.error-vapifault-assembly-ai-returning-401-invalid-credentials":
		return CallEndedReasonCallInProgressErrorVapifaultAssemblyAiReturning401InvalidCredentials, nil
	case "call.in-progress.error-vapifault-assembly-ai-returning-500-invalid-schema":
		return CallEndedReasonCallInProgressErrorVapifaultAssemblyAiReturning500InvalidSchema, nil
	case "call.in-progress.error-vapifault-assembly-ai-returning-500-word-boost-parsing-failed":
		return CallEndedReasonCallInProgressErrorVapifaultAssemblyAiReturning500WordBoostParsingFailed, nil
	case "pipeline-error-talkscriber-transcriber-failed":
		return CallEndedReasonPipelineErrorTalkscriberTranscriberFailed, nil
	case "call.in-progress.error-vapifault-talkscriber-transcriber-failed":
		return CallEndedReasonCallInProgressErrorVapifaultTalkscriberTranscriberFailed, nil
	case "pipeline-error-azure-speech-transcriber-failed":
		return CallEndedReasonPipelineErrorAzureSpeechTranscriberFailed, nil
	case "call.in-progress.error-vapifault-azure-speech-transcriber-failed":
		return CallEndedReasonCallInProgressErrorVapifaultAzureSpeechTranscriberFailed, nil
	case "call.in-progress.error-pipeline-no-available-llm-model":
		return CallEndedReasonCallInProgressErrorPipelineNoAvailableLlmModel, nil
	case "worker-shutdown":
		return CallEndedReasonWorkerShutdown, nil
	case "vonage-disconnected":
		return CallEndedReasonVonageDisconnected, nil
	case "vonage-failed-to-connect-call":
		return CallEndedReasonVonageFailedToConnectCall, nil
	case "vonage-completed":
		return CallEndedReasonVonageCompleted, nil
	case "phone-call-provider-bypass-enabled-but-no-call-received":
		return CallEndedReasonPhoneCallProviderBypassEnabledButNoCallReceived, nil
	case "call.in-progress.error-providerfault-transport-never-connected":
		return CallEndedReasonCallInProgressErrorProviderfaultTransportNeverConnected, nil
	case "call.in-progress.error-vapifault-worker-not-available":
		return CallEndedReasonCallInProgressErrorVapifaultWorkerNotAvailable, nil
	case "call.in-progress.error-vapifault-transport-never-connected":
		return CallEndedReasonCallInProgressErrorVapifaultTransportNeverConnected, nil
	case "call.in-progress.error-vapifault-transport-connected-but-call-not-active":
		return CallEndedReasonCallInProgressErrorVapifaultTransportConnectedButCallNotActive, nil
	case "call.in-progress.error-vapifault-call-started-but-connection-to-transport-missing":
		return CallEndedReasonCallInProgressErrorVapifaultCallStartedButConnectionToTransportMissing, nil
	case "call.in-progress.error-vapifault-worker-died":
		return CallEndedReasonCallInProgressErrorVapifaultWorkerDied, nil
	case "call.in-progress.twilio-completed-call":
		return CallEndedReasonCallInProgressTwilioCompletedCall, nil
	case "call.in-progress.sip-completed-call":
		return CallEndedReasonCallInProgressSipCompletedCall, nil
	case "call.in-progress.error-vapifault-openai-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultOpenaiLlmFailed, nil
	case "call.in-progress.error-vapifault-azure-openai-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultAzureOpenaiLlmFailed, nil
	case "call.in-progress.error-vapifault-groq-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultGroqLlmFailed, nil
	case "call.in-progress.error-vapifault-google-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultGoogleLlmFailed, nil
	case "call.in-progress.error-vapifault-xai-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultXaiLlmFailed, nil
	case "call.in-progress.error-vapifault-mistral-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultMistralLlmFailed, nil
	case "call.in-progress.error-vapifault-inflection-ai-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultInflectionAiLlmFailed, nil
	case "call.in-progress.error-vapifault-cerebras-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultCerebrasLlmFailed, nil
	case "call.in-progress.error-vapifault-deep-seek-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultDeepSeekLlmFailed, nil
	case "call.in-progress.error-vapifault-chat-pipeline-failed-to-start":
		return CallEndedReasonCallInProgressErrorVapifaultChatPipelineFailedToStart, nil
	case "pipeline-error-openai-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorOpenai400BadRequestValidationFailed, nil
	case "pipeline-error-openai-401-unauthorized":
		return CallEndedReasonPipelineErrorOpenai401Unauthorized, nil
	case "pipeline-error-openai-401-incorrect-api-key":
		return CallEndedReasonPipelineErrorOpenai401IncorrectApiKey, nil
	case "pipeline-error-openai-401-account-not-in-organization":
		return CallEndedReasonPipelineErrorOpenai401AccountNotInOrganization, nil
	case "pipeline-error-openai-403-model-access-denied":
		return CallEndedReasonPipelineErrorOpenai403ModelAccessDenied, nil
	case "pipeline-error-openai-429-exceeded-quota":
		return CallEndedReasonPipelineErrorOpenai429ExceededQuota, nil
	case "pipeline-error-openai-429-rate-limit-reached":
		return CallEndedReasonPipelineErrorOpenai429RateLimitReached, nil
	case "pipeline-error-openai-500-server-error":
		return CallEndedReasonPipelineErrorOpenai500ServerError, nil
	case "pipeline-error-openai-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorOpenai503ServerOverloadedError, nil
	case "pipeline-error-openai-llm-failed":
		return CallEndedReasonPipelineErrorOpenaiLlmFailed, nil
	case "call.in-progress.error-vapifault-openai-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultOpenai400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-openai-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultOpenai401Unauthorized, nil
	case "call.in-progress.error-vapifault-openai-401-incorrect-api-key":
		return CallEndedReasonCallInProgressErrorVapifaultOpenai401IncorrectApiKey, nil
	case "call.in-progress.error-vapifault-openai-401-account-not-in-organization":
		return CallEndedReasonCallInProgressErrorVapifaultOpenai401AccountNotInOrganization, nil
	case "call.in-progress.error-vapifault-openai-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultOpenai403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-openai-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultOpenai429ExceededQuota, nil
	case "call.in-progress.error-vapifault-openai-429-rate-limit-reached":
		return CallEndedReasonCallInProgressErrorVapifaultOpenai429RateLimitReached, nil
	case "call.in-progress.error-providerfault-openai-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultOpenai500ServerError, nil
	case "call.in-progress.error-providerfault-openai-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultOpenai503ServerOverloadedError, nil
	case "pipeline-error-azure-openai-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorAzureOpenai400BadRequestValidationFailed, nil
	case "pipeline-error-azure-openai-401-unauthorized":
		return CallEndedReasonPipelineErrorAzureOpenai401Unauthorized, nil
	case "pipeline-error-azure-openai-403-model-access-denied":
		return CallEndedReasonPipelineErrorAzureOpenai403ModelAccessDenied, nil
	case "pipeline-error-azure-openai-429-exceeded-quota":
		return CallEndedReasonPipelineErrorAzureOpenai429ExceededQuota, nil
	case "pipeline-error-azure-openai-500-server-error":
		return CallEndedReasonPipelineErrorAzureOpenai500ServerError, nil
	case "pipeline-error-azure-openai-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorAzureOpenai503ServerOverloadedError, nil
	case "pipeline-error-azure-openai-llm-failed":
		return CallEndedReasonPipelineErrorAzureOpenaiLlmFailed, nil
	case "call.in-progress.error-vapifault-azure-openai-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultAzureOpenai400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-azure-openai-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultAzureOpenai401Unauthorized, nil
	case "call.in-progress.error-vapifault-azure-openai-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultAzureOpenai403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-azure-openai-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultAzureOpenai429ExceededQuota, nil
	case "call.in-progress.error-providerfault-azure-openai-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultAzureOpenai500ServerError, nil
	case "call.in-progress.error-providerfault-azure-openai-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultAzureOpenai503ServerOverloadedError, nil
	case "pipeline-error-google-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorGoogle400BadRequestValidationFailed, nil
	case "pipeline-error-google-401-unauthorized":
		return CallEndedReasonPipelineErrorGoogle401Unauthorized, nil
	case "pipeline-error-google-403-model-access-denied":
		return CallEndedReasonPipelineErrorGoogle403ModelAccessDenied, nil
	case "pipeline-error-google-429-exceeded-quota":
		return CallEndedReasonPipelineErrorGoogle429ExceededQuota, nil
	case "pipeline-error-google-500-server-error":
		return CallEndedReasonPipelineErrorGoogle500ServerError, nil
	case "pipeline-error-google-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorGoogle503ServerOverloadedError, nil
	case "pipeline-error-google-llm-failed":
		return CallEndedReasonPipelineErrorGoogleLlmFailed, nil
	case "call.in-progress.error-vapifault-google-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultGoogle400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-google-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultGoogle401Unauthorized, nil
	case "call.in-progress.error-vapifault-google-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultGoogle403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-google-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultGoogle429ExceededQuota, nil
	case "call.in-progress.error-providerfault-google-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultGoogle500ServerError, nil
	case "call.in-progress.error-providerfault-google-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultGoogle503ServerOverloadedError, nil
	case "pipeline-error-xai-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorXai400BadRequestValidationFailed, nil
	case "pipeline-error-xai-401-unauthorized":
		return CallEndedReasonPipelineErrorXai401Unauthorized, nil
	case "pipeline-error-xai-403-model-access-denied":
		return CallEndedReasonPipelineErrorXai403ModelAccessDenied, nil
	case "pipeline-error-xai-429-exceeded-quota":
		return CallEndedReasonPipelineErrorXai429ExceededQuota, nil
	case "pipeline-error-xai-500-server-error":
		return CallEndedReasonPipelineErrorXai500ServerError, nil
	case "pipeline-error-xai-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorXai503ServerOverloadedError, nil
	case "pipeline-error-xai-llm-failed":
		return CallEndedReasonPipelineErrorXaiLlmFailed, nil
	case "call.in-progress.error-vapifault-xai-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultXai400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-xai-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultXai401Unauthorized, nil
	case "call.in-progress.error-vapifault-xai-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultXai403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-xai-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultXai429ExceededQuota, nil
	case "call.in-progress.error-providerfault-xai-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultXai500ServerError, nil
	case "call.in-progress.error-providerfault-xai-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultXai503ServerOverloadedError, nil
	case "pipeline-error-mistral-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorMistral400BadRequestValidationFailed, nil
	case "pipeline-error-mistral-401-unauthorized":
		return CallEndedReasonPipelineErrorMistral401Unauthorized, nil
	case "pipeline-error-mistral-403-model-access-denied":
		return CallEndedReasonPipelineErrorMistral403ModelAccessDenied, nil
	case "pipeline-error-mistral-429-exceeded-quota":
		return CallEndedReasonPipelineErrorMistral429ExceededQuota, nil
	case "pipeline-error-mistral-500-server-error":
		return CallEndedReasonPipelineErrorMistral500ServerError, nil
	case "pipeline-error-mistral-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorMistral503ServerOverloadedError, nil
	case "pipeline-error-mistral-llm-failed":
		return CallEndedReasonPipelineErrorMistralLlmFailed, nil
	case "call.in-progress.error-vapifault-mistral-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultMistral400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-mistral-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultMistral401Unauthorized, nil
	case "call.in-progress.error-vapifault-mistral-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultMistral403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-mistral-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultMistral429ExceededQuota, nil
	case "call.in-progress.error-providerfault-mistral-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultMistral500ServerError, nil
	case "call.in-progress.error-providerfault-mistral-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultMistral503ServerOverloadedError, nil
	case "pipeline-error-inflection-ai-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorInflectionAi400BadRequestValidationFailed, nil
	case "pipeline-error-inflection-ai-401-unauthorized":
		return CallEndedReasonPipelineErrorInflectionAi401Unauthorized, nil
	case "pipeline-error-inflection-ai-403-model-access-denied":
		return CallEndedReasonPipelineErrorInflectionAi403ModelAccessDenied, nil
	case "pipeline-error-inflection-ai-429-exceeded-quota":
		return CallEndedReasonPipelineErrorInflectionAi429ExceededQuota, nil
	case "pipeline-error-inflection-ai-500-server-error":
		return CallEndedReasonPipelineErrorInflectionAi500ServerError, nil
	case "pipeline-error-inflection-ai-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorInflectionAi503ServerOverloadedError, nil
	case "pipeline-error-inflection-ai-llm-failed":
		return CallEndedReasonPipelineErrorInflectionAiLlmFailed, nil
	case "call.in-progress.error-vapifault-inflection-ai-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultInflectionAi400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-inflection-ai-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultInflectionAi401Unauthorized, nil
	case "call.in-progress.error-vapifault-inflection-ai-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultInflectionAi403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-inflection-ai-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultInflectionAi429ExceededQuota, nil
	case "call.in-progress.error-providerfault-inflection-ai-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultInflectionAi500ServerError, nil
	case "call.in-progress.error-providerfault-inflection-ai-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultInflectionAi503ServerOverloadedError, nil
	case "pipeline-error-deep-seek-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorDeepSeek400BadRequestValidationFailed, nil
	case "pipeline-error-deep-seek-401-unauthorized":
		return CallEndedReasonPipelineErrorDeepSeek401Unauthorized, nil
	case "pipeline-error-deep-seek-403-model-access-denied":
		return CallEndedReasonPipelineErrorDeepSeek403ModelAccessDenied, nil
	case "pipeline-error-deep-seek-429-exceeded-quota":
		return CallEndedReasonPipelineErrorDeepSeek429ExceededQuota, nil
	case "pipeline-error-deep-seek-500-server-error":
		return CallEndedReasonPipelineErrorDeepSeek500ServerError, nil
	case "pipeline-error-deep-seek-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorDeepSeek503ServerOverloadedError, nil
	case "pipeline-error-deep-seek-llm-failed":
		return CallEndedReasonPipelineErrorDeepSeekLlmFailed, nil
	case "call.in-progress.error-vapifault-deep-seek-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultDeepSeek400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-deep-seek-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultDeepSeek401Unauthorized, nil
	case "call.in-progress.error-vapifault-deep-seek-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultDeepSeek403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-deep-seek-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultDeepSeek429ExceededQuota, nil
	case "call.in-progress.error-providerfault-deep-seek-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultDeepSeek500ServerError, nil
	case "call.in-progress.error-providerfault-deep-seek-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultDeepSeek503ServerOverloadedError, nil
	case "pipeline-error-groq-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorGroq400BadRequestValidationFailed, nil
	case "pipeline-error-groq-401-unauthorized":
		return CallEndedReasonPipelineErrorGroq401Unauthorized, nil
	case "pipeline-error-groq-403-model-access-denied":
		return CallEndedReasonPipelineErrorGroq403ModelAccessDenied, nil
	case "pipeline-error-groq-429-exceeded-quota":
		return CallEndedReasonPipelineErrorGroq429ExceededQuota, nil
	case "pipeline-error-groq-500-server-error":
		return CallEndedReasonPipelineErrorGroq500ServerError, nil
	case "pipeline-error-groq-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorGroq503ServerOverloadedError, nil
	case "pipeline-error-groq-llm-failed":
		return CallEndedReasonPipelineErrorGroqLlmFailed, nil
	case "call.in-progress.error-vapifault-groq-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultGroq400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-groq-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultGroq401Unauthorized, nil
	case "call.in-progress.error-vapifault-groq-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultGroq403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-groq-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultGroq429ExceededQuota, nil
	case "call.in-progress.error-providerfault-groq-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultGroq500ServerError, nil
	case "call.in-progress.error-providerfault-groq-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultGroq503ServerOverloadedError, nil
	case "pipeline-error-cerebras-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorCerebras400BadRequestValidationFailed, nil
	case "pipeline-error-cerebras-401-unauthorized":
		return CallEndedReasonPipelineErrorCerebras401Unauthorized, nil
	case "pipeline-error-cerebras-403-model-access-denied":
		return CallEndedReasonPipelineErrorCerebras403ModelAccessDenied, nil
	case "pipeline-error-cerebras-429-exceeded-quota":
		return CallEndedReasonPipelineErrorCerebras429ExceededQuota, nil
	case "pipeline-error-cerebras-500-server-error":
		return CallEndedReasonPipelineErrorCerebras500ServerError, nil
	case "pipeline-error-cerebras-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorCerebras503ServerOverloadedError, nil
	case "pipeline-error-cerebras-llm-failed":
		return CallEndedReasonPipelineErrorCerebrasLlmFailed, nil
	case "call.in-progress.error-vapifault-cerebras-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultCerebras400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-cerebras-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultCerebras401Unauthorized, nil
	case "call.in-progress.error-vapifault-cerebras-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultCerebras403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-cerebras-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultCerebras429ExceededQuota, nil
	case "call.in-progress.error-providerfault-cerebras-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultCerebras500ServerError, nil
	case "call.in-progress.error-providerfault-cerebras-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultCerebras503ServerOverloadedError, nil
	case "pipeline-error-anthropic-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorAnthropic400BadRequestValidationFailed, nil
	case "pipeline-error-anthropic-401-unauthorized":
		return CallEndedReasonPipelineErrorAnthropic401Unauthorized, nil
	case "pipeline-error-anthropic-403-model-access-denied":
		return CallEndedReasonPipelineErrorAnthropic403ModelAccessDenied, nil
	case "pipeline-error-anthropic-429-exceeded-quota":
		return CallEndedReasonPipelineErrorAnthropic429ExceededQuota, nil
	case "pipeline-error-anthropic-500-server-error":
		return CallEndedReasonPipelineErrorAnthropic500ServerError, nil
	case "pipeline-error-anthropic-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorAnthropic503ServerOverloadedError, nil
	case "pipeline-error-anthropic-llm-failed":
		return CallEndedReasonPipelineErrorAnthropicLlmFailed, nil
	case "call.in-progress.error-vapifault-anthropic-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropicLlmFailed, nil
	case "call.in-progress.error-vapifault-anthropic-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropic400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-anthropic-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropic401Unauthorized, nil
	case "call.in-progress.error-vapifault-anthropic-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropic403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-anthropic-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropic429ExceededQuota, nil
	case "call.in-progress.error-providerfault-anthropic-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultAnthropic500ServerError, nil
	case "call.in-progress.error-providerfault-anthropic-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultAnthropic503ServerOverloadedError, nil
	case "pipeline-error-anthropic-bedrock-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorAnthropicBedrock400BadRequestValidationFailed, nil
	case "pipeline-error-anthropic-bedrock-401-unauthorized":
		return CallEndedReasonPipelineErrorAnthropicBedrock401Unauthorized, nil
	case "pipeline-error-anthropic-bedrock-403-model-access-denied":
		return CallEndedReasonPipelineErrorAnthropicBedrock403ModelAccessDenied, nil
	case "pipeline-error-anthropic-bedrock-429-exceeded-quota":
		return CallEndedReasonPipelineErrorAnthropicBedrock429ExceededQuota, nil
	case "pipeline-error-anthropic-bedrock-500-server-error":
		return CallEndedReasonPipelineErrorAnthropicBedrock500ServerError, nil
	case "pipeline-error-anthropic-bedrock-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorAnthropicBedrock503ServerOverloadedError, nil
	case "pipeline-error-anthropic-bedrock-llm-failed":
		return CallEndedReasonPipelineErrorAnthropicBedrockLlmFailed, nil
	case "call.in-progress.error-vapifault-anthropic-bedrock-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropicBedrockLlmFailed, nil
	case "call.in-progress.error-vapifault-anthropic-bedrock-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropicBedrock400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-anthropic-bedrock-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropicBedrock401Unauthorized, nil
	case "call.in-progress.error-vapifault-anthropic-bedrock-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropicBedrock403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-anthropic-bedrock-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropicBedrock429ExceededQuota, nil
	case "call.in-progress.error-providerfault-anthropic-bedrock-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultAnthropicBedrock500ServerError, nil
	case "call.in-progress.error-providerfault-anthropic-bedrock-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultAnthropicBedrock503ServerOverloadedError, nil
	case "pipeline-error-anthropic-vertex-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorAnthropicVertex400BadRequestValidationFailed, nil
	case "pipeline-error-anthropic-vertex-401-unauthorized":
		return CallEndedReasonPipelineErrorAnthropicVertex401Unauthorized, nil
	case "pipeline-error-anthropic-vertex-403-model-access-denied":
		return CallEndedReasonPipelineErrorAnthropicVertex403ModelAccessDenied, nil
	case "pipeline-error-anthropic-vertex-429-exceeded-quota":
		return CallEndedReasonPipelineErrorAnthropicVertex429ExceededQuota, nil
	case "pipeline-error-anthropic-vertex-500-server-error":
		return CallEndedReasonPipelineErrorAnthropicVertex500ServerError, nil
	case "pipeline-error-anthropic-vertex-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorAnthropicVertex503ServerOverloadedError, nil
	case "pipeline-error-anthropic-vertex-llm-failed":
		return CallEndedReasonPipelineErrorAnthropicVertexLlmFailed, nil
	case "call.in-progress.error-vapifault-anthropic-vertex-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropicVertexLlmFailed, nil
	case "call.in-progress.error-vapifault-anthropic-vertex-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropicVertex400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-anthropic-vertex-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropicVertex401Unauthorized, nil
	case "call.in-progress.error-vapifault-anthropic-vertex-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropicVertex403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-anthropic-vertex-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultAnthropicVertex429ExceededQuota, nil
	case "call.in-progress.error-providerfault-anthropic-vertex-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultAnthropicVertex500ServerError, nil
	case "call.in-progress.error-providerfault-anthropic-vertex-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultAnthropicVertex503ServerOverloadedError, nil
	case "pipeline-error-together-ai-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorTogetherAi400BadRequestValidationFailed, nil
	case "pipeline-error-together-ai-401-unauthorized":
		return CallEndedReasonPipelineErrorTogetherAi401Unauthorized, nil
	case "pipeline-error-together-ai-403-model-access-denied":
		return CallEndedReasonPipelineErrorTogetherAi403ModelAccessDenied, nil
	case "pipeline-error-together-ai-429-exceeded-quota":
		return CallEndedReasonPipelineErrorTogetherAi429ExceededQuota, nil
	case "pipeline-error-together-ai-500-server-error":
		return CallEndedReasonPipelineErrorTogetherAi500ServerError, nil
	case "pipeline-error-together-ai-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorTogetherAi503ServerOverloadedError, nil
	case "pipeline-error-together-ai-llm-failed":
		return CallEndedReasonPipelineErrorTogetherAiLlmFailed, nil
	case "call.in-progress.error-vapifault-together-ai-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultTogetherAiLlmFailed, nil
	case "call.in-progress.error-vapifault-together-ai-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultTogetherAi400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-together-ai-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultTogetherAi401Unauthorized, nil
	case "call.in-progress.error-vapifault-together-ai-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultTogetherAi403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-together-ai-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultTogetherAi429ExceededQuota, nil
	case "call.in-progress.error-providerfault-together-ai-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultTogetherAi500ServerError, nil
	case "call.in-progress.error-providerfault-together-ai-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultTogetherAi503ServerOverloadedError, nil
	case "pipeline-error-anyscale-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorAnyscale400BadRequestValidationFailed, nil
	case "pipeline-error-anyscale-401-unauthorized":
		return CallEndedReasonPipelineErrorAnyscale401Unauthorized, nil
	case "pipeline-error-anyscale-403-model-access-denied":
		return CallEndedReasonPipelineErrorAnyscale403ModelAccessDenied, nil
	case "pipeline-error-anyscale-429-exceeded-quota":
		return CallEndedReasonPipelineErrorAnyscale429ExceededQuota, nil
	case "pipeline-error-anyscale-500-server-error":
		return CallEndedReasonPipelineErrorAnyscale500ServerError, nil
	case "pipeline-error-anyscale-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorAnyscale503ServerOverloadedError, nil
	case "pipeline-error-anyscale-llm-failed":
		return CallEndedReasonPipelineErrorAnyscaleLlmFailed, nil
	case "call.in-progress.error-vapifault-anyscale-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultAnyscaleLlmFailed, nil
	case "call.in-progress.error-vapifault-anyscale-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultAnyscale400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-anyscale-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultAnyscale401Unauthorized, nil
	case "call.in-progress.error-vapifault-anyscale-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultAnyscale403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-anyscale-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultAnyscale429ExceededQuota, nil
	case "call.in-progress.error-providerfault-anyscale-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultAnyscale500ServerError, nil
	case "call.in-progress.error-providerfault-anyscale-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultAnyscale503ServerOverloadedError, nil
	case "pipeline-error-openrouter-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorOpenrouter400BadRequestValidationFailed, nil
	case "pipeline-error-openrouter-401-unauthorized":
		return CallEndedReasonPipelineErrorOpenrouter401Unauthorized, nil
	case "pipeline-error-openrouter-403-model-access-denied":
		return CallEndedReasonPipelineErrorOpenrouter403ModelAccessDenied, nil
	case "pipeline-error-openrouter-429-exceeded-quota":
		return CallEndedReasonPipelineErrorOpenrouter429ExceededQuota, nil
	case "pipeline-error-openrouter-500-server-error":
		return CallEndedReasonPipelineErrorOpenrouter500ServerError, nil
	case "pipeline-error-openrouter-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorOpenrouter503ServerOverloadedError, nil
	case "pipeline-error-openrouter-llm-failed":
		return CallEndedReasonPipelineErrorOpenrouterLlmFailed, nil
	case "call.in-progress.error-vapifault-openrouter-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultOpenrouterLlmFailed, nil
	case "call.in-progress.error-vapifault-openrouter-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultOpenrouter400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-openrouter-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultOpenrouter401Unauthorized, nil
	case "call.in-progress.error-vapifault-openrouter-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultOpenrouter403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-openrouter-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultOpenrouter429ExceededQuota, nil
	case "call.in-progress.error-providerfault-openrouter-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultOpenrouter500ServerError, nil
	case "call.in-progress.error-providerfault-openrouter-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultOpenrouter503ServerOverloadedError, nil
	case "pipeline-error-perplexity-ai-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorPerplexityAi400BadRequestValidationFailed, nil
	case "pipeline-error-perplexity-ai-401-unauthorized":
		return CallEndedReasonPipelineErrorPerplexityAi401Unauthorized, nil
	case "pipeline-error-perplexity-ai-403-model-access-denied":
		return CallEndedReasonPipelineErrorPerplexityAi403ModelAccessDenied, nil
	case "pipeline-error-perplexity-ai-429-exceeded-quota":
		return CallEndedReasonPipelineErrorPerplexityAi429ExceededQuota, nil
	case "pipeline-error-perplexity-ai-500-server-error":
		return CallEndedReasonPipelineErrorPerplexityAi500ServerError, nil
	case "pipeline-error-perplexity-ai-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorPerplexityAi503ServerOverloadedError, nil
	case "pipeline-error-perplexity-ai-llm-failed":
		return CallEndedReasonPipelineErrorPerplexityAiLlmFailed, nil
	case "call.in-progress.error-vapifault-perplexity-ai-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultPerplexityAiLlmFailed, nil
	case "call.in-progress.error-vapifault-perplexity-ai-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultPerplexityAi400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-perplexity-ai-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultPerplexityAi401Unauthorized, nil
	case "call.in-progress.error-vapifault-perplexity-ai-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultPerplexityAi403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-perplexity-ai-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultPerplexityAi429ExceededQuota, nil
	case "call.in-progress.error-providerfault-perplexity-ai-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultPerplexityAi500ServerError, nil
	case "call.in-progress.error-providerfault-perplexity-ai-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultPerplexityAi503ServerOverloadedError, nil
	case "pipeline-error-deepinfra-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorDeepinfra400BadRequestValidationFailed, nil
	case "pipeline-error-deepinfra-401-unauthorized":
		return CallEndedReasonPipelineErrorDeepinfra401Unauthorized, nil
	case "pipeline-error-deepinfra-403-model-access-denied":
		return CallEndedReasonPipelineErrorDeepinfra403ModelAccessDenied, nil
	case "pipeline-error-deepinfra-429-exceeded-quota":
		return CallEndedReasonPipelineErrorDeepinfra429ExceededQuota, nil
	case "pipeline-error-deepinfra-500-server-error":
		return CallEndedReasonPipelineErrorDeepinfra500ServerError, nil
	case "pipeline-error-deepinfra-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorDeepinfra503ServerOverloadedError, nil
	case "pipeline-error-deepinfra-llm-failed":
		return CallEndedReasonPipelineErrorDeepinfraLlmFailed, nil
	case "call.in-progress.error-vapifault-deepinfra-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultDeepinfraLlmFailed, nil
	case "call.in-progress.error-vapifault-deepinfra-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultDeepinfra400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-deepinfra-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultDeepinfra401Unauthorized, nil
	case "call.in-progress.error-vapifault-deepinfra-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultDeepinfra403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-deepinfra-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultDeepinfra429ExceededQuota, nil
	case "call.in-progress.error-providerfault-deepinfra-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultDeepinfra500ServerError, nil
	case "call.in-progress.error-providerfault-deepinfra-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultDeepinfra503ServerOverloadedError, nil
	case "pipeline-error-runpod-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorRunpod400BadRequestValidationFailed, nil
	case "pipeline-error-runpod-401-unauthorized":
		return CallEndedReasonPipelineErrorRunpod401Unauthorized, nil
	case "pipeline-error-runpod-403-model-access-denied":
		return CallEndedReasonPipelineErrorRunpod403ModelAccessDenied, nil
	case "pipeline-error-runpod-429-exceeded-quota":
		return CallEndedReasonPipelineErrorRunpod429ExceededQuota, nil
	case "pipeline-error-runpod-500-server-error":
		return CallEndedReasonPipelineErrorRunpod500ServerError, nil
	case "pipeline-error-runpod-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorRunpod503ServerOverloadedError, nil
	case "pipeline-error-runpod-llm-failed":
		return CallEndedReasonPipelineErrorRunpodLlmFailed, nil
	case "call.in-progress.error-vapifault-runpod-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultRunpodLlmFailed, nil
	case "call.in-progress.error-vapifault-runpod-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultRunpod400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-runpod-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultRunpod401Unauthorized, nil
	case "call.in-progress.error-vapifault-runpod-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultRunpod403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-runpod-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultRunpod429ExceededQuota, nil
	case "call.in-progress.error-providerfault-runpod-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultRunpod500ServerError, nil
	case "call.in-progress.error-providerfault-runpod-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultRunpod503ServerOverloadedError, nil
	case "pipeline-error-custom-llm-400-bad-request-validation-failed":
		return CallEndedReasonPipelineErrorCustomLlm400BadRequestValidationFailed, nil
	case "pipeline-error-custom-llm-401-unauthorized":
		return CallEndedReasonPipelineErrorCustomLlm401Unauthorized, nil
	case "pipeline-error-custom-llm-403-model-access-denied":
		return CallEndedReasonPipelineErrorCustomLlm403ModelAccessDenied, nil
	case "pipeline-error-custom-llm-429-exceeded-quota":
		return CallEndedReasonPipelineErrorCustomLlm429ExceededQuota, nil
	case "pipeline-error-custom-llm-500-server-error":
		return CallEndedReasonPipelineErrorCustomLlm500ServerError, nil
	case "pipeline-error-custom-llm-503-server-overloaded-error":
		return CallEndedReasonPipelineErrorCustomLlm503ServerOverloadedError, nil
	case "pipeline-error-custom-llm-llm-failed":
		return CallEndedReasonPipelineErrorCustomLlmLlmFailed, nil
	case "call.in-progress.error-vapifault-custom-llm-llm-failed":
		return CallEndedReasonCallInProgressErrorVapifaultCustomLlmLlmFailed, nil
	case "call.in-progress.error-vapifault-custom-llm-400-bad-request-validation-failed":
		return CallEndedReasonCallInProgressErrorVapifaultCustomLlm400BadRequestValidationFailed, nil
	case "call.in-progress.error-vapifault-custom-llm-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultCustomLlm401Unauthorized, nil
	case "call.in-progress.error-vapifault-custom-llm-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultCustomLlm403ModelAccessDenied, nil
	case "call.in-progress.error-vapifault-custom-llm-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultCustomLlm429ExceededQuota, nil
	case "call.in-progress.error-providerfault-custom-llm-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultCustomLlm500ServerError, nil
	case "call.in-progress.error-providerfault-custom-llm-503-server-overloaded-error":
		return CallEndedReasonCallInProgressErrorProviderfaultCustomLlm503ServerOverloadedError, nil
	case "pipeline-error-custom-voice-failed":
		return CallEndedReasonPipelineErrorCustomVoiceFailed, nil
	case "pipeline-error-cartesia-socket-hang-up":
		return CallEndedReasonPipelineErrorCartesiaSocketHangUp, nil
	case "pipeline-error-cartesia-requested-payment":
		return CallEndedReasonPipelineErrorCartesiaRequestedPayment, nil
	case "pipeline-error-cartesia-500-server-error":
		return CallEndedReasonPipelineErrorCartesia500ServerError, nil
	case "pipeline-error-cartesia-502-server-error":
		return CallEndedReasonPipelineErrorCartesia502ServerError, nil
	case "pipeline-error-cartesia-503-server-error":
		return CallEndedReasonPipelineErrorCartesia503ServerError, nil
	case "pipeline-error-cartesia-522-server-error":
		return CallEndedReasonPipelineErrorCartesia522ServerError, nil
	case "call.in-progress.error-vapifault-cartesia-socket-hang-up":
		return CallEndedReasonCallInProgressErrorVapifaultCartesiaSocketHangUp, nil
	case "call.in-progress.error-vapifault-cartesia-requested-payment":
		return CallEndedReasonCallInProgressErrorVapifaultCartesiaRequestedPayment, nil
	case "call.in-progress.error-providerfault-cartesia-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultCartesia500ServerError, nil
	case "call.in-progress.error-providerfault-cartesia-503-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultCartesia503ServerError, nil
	case "call.in-progress.error-providerfault-cartesia-522-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultCartesia522ServerError, nil
	case "pipeline-error-eleven-labs-voice-not-found":
		return CallEndedReasonPipelineErrorElevenLabsVoiceNotFound, nil
	case "pipeline-error-eleven-labs-quota-exceeded":
		return CallEndedReasonPipelineErrorElevenLabsQuotaExceeded, nil
	case "pipeline-error-eleven-labs-unauthorized-access":
		return CallEndedReasonPipelineErrorElevenLabsUnauthorizedAccess, nil
	case "pipeline-error-eleven-labs-unauthorized-to-access-model":
		return CallEndedReasonPipelineErrorElevenLabsUnauthorizedToAccessModel, nil
	case "pipeline-error-eleven-labs-professional-voices-only-for-creator-plus":
		return CallEndedReasonPipelineErrorElevenLabsProfessionalVoicesOnlyForCreatorPlus, nil
	case "pipeline-error-eleven-labs-blocked-free-plan-and-requested-upgrade":
		return CallEndedReasonPipelineErrorElevenLabsBlockedFreePlanAndRequestedUpgrade, nil
	case "pipeline-error-eleven-labs-blocked-concurrent-requests-and-requested-upgrade":
		return CallEndedReasonPipelineErrorElevenLabsBlockedConcurrentRequestsAndRequestedUpgrade, nil
	case "pipeline-error-eleven-labs-blocked-using-instant-voice-clone-and-requested-upgrade":
		return CallEndedReasonPipelineErrorElevenLabsBlockedUsingInstantVoiceCloneAndRequestedUpgrade, nil
	case "pipeline-error-eleven-labs-system-busy-and-requested-upgrade":
		return CallEndedReasonPipelineErrorElevenLabsSystemBusyAndRequestedUpgrade, nil
	case "pipeline-error-eleven-labs-voice-not-fine-tuned":
		return CallEndedReasonPipelineErrorElevenLabsVoiceNotFineTuned, nil
	case "pipeline-error-eleven-labs-invalid-api-key":
		return CallEndedReasonPipelineErrorElevenLabsInvalidApiKey, nil
	case "pipeline-error-eleven-labs-invalid-voice-samples":
		return CallEndedReasonPipelineErrorElevenLabsInvalidVoiceSamples, nil
	case "pipeline-error-eleven-labs-voice-disabled-by-owner":
		return CallEndedReasonPipelineErrorElevenLabsVoiceDisabledByOwner, nil
	case "pipeline-error-eleven-labs-vapi-voice-disabled-by-owner":
		return CallEndedReasonPipelineErrorElevenLabsVapiVoiceDisabledByOwner, nil
	case "pipeline-error-eleven-labs-blocked-account-in-probation":
		return CallEndedReasonPipelineErrorElevenLabsBlockedAccountInProbation, nil
	case "pipeline-error-eleven-labs-blocked-content-against-their-policy":
		return CallEndedReasonPipelineErrorElevenLabsBlockedContentAgainstTheirPolicy, nil
	case "pipeline-error-eleven-labs-missing-samples-for-voice-clone":
		return CallEndedReasonPipelineErrorElevenLabsMissingSamplesForVoiceClone, nil
	case "pipeline-error-eleven-labs-voice-not-fine-tuned-and-cannot-be-used":
		return CallEndedReasonPipelineErrorElevenLabsVoiceNotFineTunedAndCannotBeUsed, nil
	case "pipeline-error-eleven-labs-voice-not-allowed-for-free-users":
		return CallEndedReasonPipelineErrorElevenLabsVoiceNotAllowedForFreeUsers, nil
	case "pipeline-error-eleven-labs-max-character-limit-exceeded":
		return CallEndedReasonPipelineErrorElevenLabsMaxCharacterLimitExceeded, nil
	case "pipeline-error-eleven-labs-blocked-voice-potentially-against-terms-of-service-and-awaiting-verification":
		return CallEndedReasonPipelineErrorElevenLabsBlockedVoicePotentiallyAgainstTermsOfServiceAndAwaitingVerification, nil
	case "pipeline-error-eleven-labs-500-server-error":
		return CallEndedReasonPipelineErrorElevenLabs500ServerError, nil
	case "pipeline-error-eleven-labs-503-server-error":
		return CallEndedReasonPipelineErrorElevenLabs503ServerError, nil
	case "call.in-progress.error-vapifault-eleven-labs-voice-not-found":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsVoiceNotFound, nil
	case "call.in-progress.error-vapifault-eleven-labs-quota-exceeded":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsQuotaExceeded, nil
	case "call.in-progress.error-vapifault-eleven-labs-unauthorized-access":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsUnauthorizedAccess, nil
	case "call.in-progress.error-vapifault-eleven-labs-unauthorized-to-access-model":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsUnauthorizedToAccessModel, nil
	case "call.in-progress.error-vapifault-eleven-labs-professional-voices-only-for-creator-plus":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsProfessionalVoicesOnlyForCreatorPlus, nil
	case "call.in-progress.error-vapifault-eleven-labs-blocked-free-plan-and-requested-upgrade":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsBlockedFreePlanAndRequestedUpgrade, nil
	case "call.in-progress.error-vapifault-eleven-labs-blocked-concurrent-requests-and-requested-upgrade":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsBlockedConcurrentRequestsAndRequestedUpgrade, nil
	case "call.in-progress.error-vapifault-eleven-labs-blocked-using-instant-voice-clone-and-requested-upgrade":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsBlockedUsingInstantVoiceCloneAndRequestedUpgrade, nil
	case "call.in-progress.error-vapifault-eleven-labs-system-busy-and-requested-upgrade":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsSystemBusyAndRequestedUpgrade, nil
	case "call.in-progress.error-vapifault-eleven-labs-voice-not-fine-tuned":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsVoiceNotFineTuned, nil
	case "call.in-progress.error-vapifault-eleven-labs-invalid-api-key":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsInvalidApiKey, nil
	case "call.in-progress.error-vapifault-eleven-labs-invalid-voice-samples":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsInvalidVoiceSamples, nil
	case "call.in-progress.error-vapifault-eleven-labs-voice-disabled-by-owner":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsVoiceDisabledByOwner, nil
	case "call.in-progress.error-vapifault-eleven-labs-blocked-account-in-probation":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsBlockedAccountInProbation, nil
	case "call.in-progress.error-vapifault-eleven-labs-blocked-content-against-their-policy":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsBlockedContentAgainstTheirPolicy, nil
	case "call.in-progress.error-vapifault-eleven-labs-missing-samples-for-voice-clone":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsMissingSamplesForVoiceClone, nil
	case "call.in-progress.error-vapifault-eleven-labs-voice-not-fine-tuned-and-cannot-be-used":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsVoiceNotFineTunedAndCannotBeUsed, nil
	case "call.in-progress.error-vapifault-eleven-labs-voice-not-allowed-for-free-users":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsVoiceNotAllowedForFreeUsers, nil
	case "call.in-progress.error-vapifault-eleven-labs-max-character-limit-exceeded":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsMaxCharacterLimitExceeded, nil
	case "call.in-progress.error-vapifault-eleven-labs-blocked-voice-potentially-against-terms-of-service-and-awaiting-verification":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsBlockedVoicePotentiallyAgainstTermsOfServiceAndAwaitingVerification, nil
	case "call.in-progress.error-providerfault-eleven-labs-500-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultElevenLabs500ServerError, nil
	case "call.in-progress.error-providerfault-eleven-labs-503-server-error":
		return CallEndedReasonCallInProgressErrorProviderfaultElevenLabs503ServerError, nil
	case "pipeline-error-playht-request-timed-out":
		return CallEndedReasonPipelineErrorPlayhtRequestTimedOut, nil
	case "pipeline-error-playht-invalid-voice":
		return CallEndedReasonPipelineErrorPlayhtInvalidVoice, nil
	case "pipeline-error-playht-unexpected-error":
		return CallEndedReasonPipelineErrorPlayhtUnexpectedError, nil
	case "pipeline-error-playht-out-of-credits":
		return CallEndedReasonPipelineErrorPlayhtOutOfCredits, nil
	case "pipeline-error-playht-invalid-emotion":
		return CallEndedReasonPipelineErrorPlayhtInvalidEmotion, nil
	case "pipeline-error-playht-voice-must-be-a-valid-voice-manifest-uri":
		return CallEndedReasonPipelineErrorPlayhtVoiceMustBeAValidVoiceManifestUri, nil
	case "pipeline-error-playht-401-unauthorized":
		return CallEndedReasonPipelineErrorPlayht401Unauthorized, nil
	case "pipeline-error-playht-403-forbidden-out-of-characters":
		return CallEndedReasonPipelineErrorPlayht403ForbiddenOutOfCharacters, nil
	case "pipeline-error-playht-403-forbidden-api-access-not-available":
		return CallEndedReasonPipelineErrorPlayht403ForbiddenApiAccessNotAvailable, nil
	case "pipeline-error-playht-429-exceeded-quota":
		return CallEndedReasonPipelineErrorPlayht429ExceededQuota, nil
	case "pipeline-error-playht-502-gateway-error":
		return CallEndedReasonPipelineErrorPlayht502GatewayError, nil
	case "pipeline-error-playht-504-gateway-error":
		return CallEndedReasonPipelineErrorPlayht504GatewayError, nil
	case "call.in-progress.error-vapifault-playht-request-timed-out":
		return CallEndedReasonCallInProgressErrorVapifaultPlayhtRequestTimedOut, nil
	case "call.in-progress.error-vapifault-playht-invalid-voice":
		return CallEndedReasonCallInProgressErrorVapifaultPlayhtInvalidVoice, nil
	case "call.in-progress.error-vapifault-playht-unexpected-error":
		return CallEndedReasonCallInProgressErrorVapifaultPlayhtUnexpectedError, nil
	case "call.in-progress.error-vapifault-playht-out-of-credits":
		return CallEndedReasonCallInProgressErrorVapifaultPlayhtOutOfCredits, nil
	case "call.in-progress.error-vapifault-playht-invalid-emotion":
		return CallEndedReasonCallInProgressErrorVapifaultPlayhtInvalidEmotion, nil
	case "call.in-progress.error-vapifault-playht-voice-must-be-a-valid-voice-manifest-uri":
		return CallEndedReasonCallInProgressErrorVapifaultPlayhtVoiceMustBeAValidVoiceManifestUri, nil
	case "call.in-progress.error-vapifault-playht-401-unauthorized":
		return CallEndedReasonCallInProgressErrorVapifaultPlayht401Unauthorized, nil
	case "call.in-progress.error-vapifault-playht-403-forbidden-out-of-characters":
		return CallEndedReasonCallInProgressErrorVapifaultPlayht403ForbiddenOutOfCharacters, nil
	case "call.in-progress.error-vapifault-playht-403-forbidden-api-access-not-available":
		return CallEndedReasonCallInProgressErrorVapifaultPlayht403ForbiddenApiAccessNotAvailable, nil
	case "call.in-progress.error-vapifault-playht-429-exceeded-quota":
		return CallEndedReasonCallInProgressErrorVapifaultPlayht429ExceededQuota, nil
	case "call.in-progress.error-providerfault-playht-502-gateway-error":
		return CallEndedReasonCallInProgressErrorProviderfaultPlayht502GatewayError, nil
	case "call.in-progress.error-providerfault-playht-504-gateway-error":
		return CallEndedReasonCallInProgressErrorProviderfaultPlayht504GatewayError, nil
	case "pipeline-error-custom-transcriber-failed":
		return CallEndedReasonPipelineErrorCustomTranscriberFailed, nil
	case "call.in-progress.error-vapifault-custom-transcriber-failed":
		return CallEndedReasonCallInProgressErrorVapifaultCustomTranscriberFailed, nil
	case "pipeline-error-eleven-labs-transcriber-failed":
		return CallEndedReasonPipelineErrorElevenLabsTranscriberFailed, nil
	case "call.in-progress.error-vapifault-eleven-labs-transcriber-failed":
		return CallEndedReasonCallInProgressErrorVapifaultElevenLabsTranscriberFailed, nil
	case "pipeline-error-deepgram-returning-400-no-such-model-language-tier-combination":
		return CallEndedReasonPipelineErrorDeepgramReturning400NoSuchModelLanguageTierCombination, nil
	case "pipeline-error-deepgram-returning-401-invalid-credentials":
		return CallEndedReasonPipelineErrorDeepgramReturning401InvalidCredentials, nil
	case "pipeline-error-deepgram-returning-403-model-access-denied":
		return CallEndedReasonPipelineErrorDeepgramReturning403ModelAccessDenied, nil
	case "pipeline-error-deepgram-returning-404-not-found":
		return CallEndedReasonPipelineErrorDeepgramReturning404NotFound, nil
	case "pipeline-error-deepgram-returning-500-invalid-json":
		return CallEndedReasonPipelineErrorDeepgramReturning500InvalidJson, nil
	case "pipeline-error-deepgram-returning-502-network-error":
		return CallEndedReasonPipelineErrorDeepgramReturning502NetworkError, nil
	case "pipeline-error-deepgram-returning-502-bad-gateway-ehostunreach":
		return CallEndedReasonPipelineErrorDeepgramReturning502BadGatewayEhostunreach, nil
	case "pipeline-error-deepgram-returning-econnreset":
		return CallEndedReasonPipelineErrorDeepgramReturningEconnreset, nil
	case "call.in-progress.error-vapifault-deepgram-returning-400-no-such-model-language-tier-combination":
		return CallEndedReasonCallInProgressErrorVapifaultDeepgramReturning400NoSuchModelLanguageTierCombination, nil
	case "call.in-progress.error-vapifault-deepgram-returning-401-invalid-credentials":
		return CallEndedReasonCallInProgressErrorVapifaultDeepgramReturning401InvalidCredentials, nil
	case "call.in-progress.error-vapifault-deepgram-returning-404-not-found":
		return CallEndedReasonCallInProgressErrorVapifaultDeepgramReturning404NotFound, nil
	case "call.in-progress.error-vapifault-deepgram-returning-403-model-access-denied":
		return CallEndedReasonCallInProgressErrorVapifaultDeepgramReturning403ModelAccessDenied, nil
	case "call.in-progress.error-providerfault-deepgram-returning-500-invalid-json":
		return CallEndedReasonCallInProgressErrorProviderfaultDeepgramReturning500InvalidJson, nil
	case "call.in-progress.error-providerfault-deepgram-returning-502-network-error":
		return CallEndedReasonCallInProgressErrorProviderfaultDeepgramReturning502NetworkError, nil
	case "call.in-progress.error-providerfault-deepgram-returning-502-bad-gateway-ehostunreach":
		return CallEndedReasonCallInProgressErrorProviderfaultDeepgramReturning502BadGatewayEhostunreach, nil
	case "pipeline-error-google-transcriber-failed":
		return CallEndedReasonPipelineErrorGoogleTranscriberFailed, nil
	case "call.in-progress.error-vapifault-google-transcriber-failed":
		return CallEndedReasonCallInProgressErrorVapifaultGoogleTranscriberFailed, nil
	case "pipeline-error-openai-transcriber-failed":
		return CallEndedReasonPipelineErrorOpenaiTranscriberFailed, nil
	case "call.in-progress.error-vapifault-openai-transcriber-failed":
		return CallEndedReasonCallInProgressErrorVapifaultOpenaiTranscriberFailed, nil
	case "assistant-ended-call":
		return CallEndedReasonAssistantEndedCall, nil
	case "assistant-said-end-call-phrase":
		return CallEndedReasonAssistantSaidEndCallPhrase, nil
	case "assistant-ended-call-with-hangup-task":
		return CallEndedReasonAssistantEndedCallWithHangupTask, nil
	case "assistant-ended-call-after-message-spoken":
		return CallEndedReasonAssistantEndedCallAfterMessageSpoken, nil
	case "assistant-forwarded-call":
		return CallEndedReasonAssistantForwardedCall, nil
	case "assistant-join-timed-out":
		return CallEndedReasonAssistantJoinTimedOut, nil
	case "call.in-progress.error-assistant-did-not-receive-customer-audio":
		return CallEndedReasonCallInProgressErrorAssistantDidNotReceiveCustomerAudio, nil
	case "call.in-progress.error-transfer-failed":
		return CallEndedReasonCallInProgressErrorTransferFailed, nil
	case "customer-busy":
		return CallEndedReasonCustomerBusy, nil
	case "customer-ended-call":
		return CallEndedReasonCustomerEndedCall, nil
	case "customer-did-not-answer":
		return CallEndedReasonCustomerDidNotAnswer, nil
	case "customer-did-not-give-microphone-permission":
		return CallEndedReasonCustomerDidNotGiveMicrophonePermission, nil
	case "exceeded-max-duration":
		return CallEndedReasonExceededMaxDuration, nil
	case "manually-canceled":
		return CallEndedReasonManuallyCanceled, nil
	case "phone-call-provider-closed-websocket":
		return CallEndedReasonPhoneCallProviderClosedWebsocket, nil
	case "call.forwarding.operator-busy":
		return CallEndedReasonCallForwardingOperatorBusy, nil
	case "silence-timed-out":
		return CallEndedReasonSilenceTimedOut, nil
	case "call.in-progress.error-sip-inbound-call-failed-to-connect":
		return CallEndedReasonCallInProgressErrorSipInboundCallFailedToConnect, nil
	case "call.in-progress.error-providerfault-outbound-sip-403-forbidden":
		return CallEndedReasonCallInProgressErrorProviderfaultOutboundSip403Forbidden, nil
	case "call.in-progress.error-providerfault-outbound-sip-407-proxy-authentication-required":
		return CallEndedReasonCallInProgressErrorProviderfaultOutboundSip407ProxyAuthenticationRequired, nil
	case "call.in-progress.error-providerfault-outbound-sip-503-service-unavailable":
		return CallEndedReasonCallInProgressErrorProviderfaultOutboundSip503ServiceUnavailable, nil
	case "call.in-progress.error-providerfault-outbound-sip-480-temporarily-unavailable":
		return CallEndedReasonCallInProgressErrorProviderfaultOutboundSip480TemporarilyUnavailable, nil
	case "call.in-progress.error-sip-outbound-call-failed-to-connect":
		return CallEndedReasonCallInProgressErrorSipOutboundCallFailedToConnect, nil
	case "call.ringing.hook-executed-say":
		return CallEndedReasonCallRingingHookExecutedSay, nil
	case "call.ringing.hook-executed-transfer":
		return CallEndedReasonCallRingingHookExecutedTransfer, nil
	case "call.ringing.sip-inbound-caller-hungup-before-call-connect":
		return CallEndedReasonCallRingingSipInboundCallerHungupBeforeCallConnect, nil
	case "call.ringing.error-sip-inbound-call-failed-to-connect":
		return CallEndedReasonCallRingingErrorSipInboundCallFailedToConnect, nil
	case "twilio-failed-to-connect-call":
		return CallEndedReasonTwilioFailedToConnectCall, nil
	case "twilio-reported-customer-misdialed":
		return CallEndedReasonTwilioReportedCustomerMisdialed, nil
	case "vonage-rejected":
		return CallEndedReasonVonageRejected, nil
	case "voicemail":
		return CallEndedReasonVoicemail, nil
	}
	var t CallEndedReason
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CallEndedReason) Ptr() *CallEndedReason {
	return &c
}

type CallMessagesItem struct {
	UserMessage           *UserMessage
	SystemMessage         *SystemMessage
	BotMessage            *BotMessage
	ToolCallMessage       *ToolCallMessage
	ToolCallResultMessage *ToolCallResultMessage

	typ string
}

func (c *CallMessagesItem) GetUserMessage() *UserMessage {
	if c == nil {
		return nil
	}
	return c.UserMessage
}

func (c *CallMessagesItem) GetSystemMessage() *SystemMessage {
	if c == nil {
		return nil
	}
	return c.SystemMessage
}

func (c *CallMessagesItem) GetBotMessage() *BotMessage {
	if c == nil {
		return nil
	}
	return c.BotMessage
}

func (c *CallMessagesItem) GetToolCallMessage() *ToolCallMessage {
	if c == nil {
		return nil
	}
	return c.ToolCallMessage
}

func (c *CallMessagesItem) GetToolCallResultMessage() *ToolCallResultMessage {
	if c == nil {
		return nil
	}
	return c.ToolCallResultMessage
}

func (c *CallMessagesItem) UnmarshalJSON(data []byte) error {
	valueUserMessage := new(UserMessage)
	if err := json.Unmarshal(data, &valueUserMessage); err == nil {
		c.typ = "UserMessage"
		c.UserMessage = valueUserMessage
		return nil
	}
	valueSystemMessage := new(SystemMessage)
	if err := json.Unmarshal(data, &valueSystemMessage); err == nil {
		c.typ = "SystemMessage"
		c.SystemMessage = valueSystemMessage
		return nil
	}
	valueBotMessage := new(BotMessage)
	if err := json.Unmarshal(data, &valueBotMessage); err == nil {
		c.typ = "BotMessage"
		c.BotMessage = valueBotMessage
		return nil
	}
	valueToolCallMessage := new(ToolCallMessage)
	if err := json.Unmarshal(data, &valueToolCallMessage); err == nil {
		c.typ = "ToolCallMessage"
		c.ToolCallMessage = valueToolCallMessage
		return nil
	}
	valueToolCallResultMessage := new(ToolCallResultMessage)
	if err := json.Unmarshal(data, &valueToolCallResultMessage); err == nil {
		c.typ = "ToolCallResultMessage"
		c.ToolCallResultMessage = valueToolCallResultMessage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CallMessagesItem) MarshalJSON() ([]byte, error) {
	if c.typ == "UserMessage" || c.UserMessage != nil {
		return json.Marshal(c.UserMessage)
	}
	if c.typ == "SystemMessage" || c.SystemMessage != nil {
		return json.Marshal(c.SystemMessage)
	}
	if c.typ == "BotMessage" || c.BotMessage != nil {
		return json.Marshal(c.BotMessage)
	}
	if c.typ == "ToolCallMessage" || c.ToolCallMessage != nil {
		return json.Marshal(c.ToolCallMessage)
	}
	if c.typ == "ToolCallResultMessage" || c.ToolCallResultMessage != nil {
		return json.Marshal(c.ToolCallResultMessage)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CallMessagesItemVisitor interface {
	VisitUserMessage(*UserMessage) error
	VisitSystemMessage(*SystemMessage) error
	VisitBotMessage(*BotMessage) error
	VisitToolCallMessage(*ToolCallMessage) error
	VisitToolCallResultMessage(*ToolCallResultMessage) error
}

func (c *CallMessagesItem) Accept(visitor CallMessagesItemVisitor) error {
	if c.typ == "UserMessage" || c.UserMessage != nil {
		return visitor.VisitUserMessage(c.UserMessage)
	}
	if c.typ == "SystemMessage" || c.SystemMessage != nil {
		return visitor.VisitSystemMessage(c.SystemMessage)
	}
	if c.typ == "BotMessage" || c.BotMessage != nil {
		return visitor.VisitBotMessage(c.BotMessage)
	}
	if c.typ == "ToolCallMessage" || c.ToolCallMessage != nil {
		return visitor.VisitToolCallMessage(c.ToolCallMessage)
	}
	if c.typ == "ToolCallResultMessage" || c.ToolCallResultMessage != nil {
		return visitor.VisitToolCallResultMessage(c.ToolCallResultMessage)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

// This is the provider of the call.
//
// Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
type CallPhoneCallProvider string

const (
	CallPhoneCallProviderTwilio CallPhoneCallProvider = "twilio"
	CallPhoneCallProviderVonage CallPhoneCallProvider = "vonage"
	CallPhoneCallProviderVapi   CallPhoneCallProvider = "vapi"
	CallPhoneCallProviderTelnyx CallPhoneCallProvider = "telnyx"
)

func NewCallPhoneCallProviderFromString(s string) (CallPhoneCallProvider, error) {
	switch s {
	case "twilio":
		return CallPhoneCallProviderTwilio, nil
	case "vonage":
		return CallPhoneCallProviderVonage, nil
	case "vapi":
		return CallPhoneCallProviderVapi, nil
	case "telnyx":
		return CallPhoneCallProviderTelnyx, nil
	}
	var t CallPhoneCallProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CallPhoneCallProvider) Ptr() *CallPhoneCallProvider {
	return &c
}

// This is the transport of the phone call.
//
// Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.
type CallPhoneCallTransport string

const (
	CallPhoneCallTransportSip  CallPhoneCallTransport = "sip"
	CallPhoneCallTransportPstn CallPhoneCallTransport = "pstn"
)

func NewCallPhoneCallTransportFromString(s string) (CallPhoneCallTransport, error) {
	switch s {
	case "sip":
		return CallPhoneCallTransportSip, nil
	case "pstn":
		return CallPhoneCallTransportPstn, nil
	}
	var t CallPhoneCallTransport
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CallPhoneCallTransport) Ptr() *CallPhoneCallTransport {
	return &c
}

// This is the status of the call.
type CallStatus string

const (
	CallStatusScheduled  CallStatus = "scheduled"
	CallStatusQueued     CallStatus = "queued"
	CallStatusRinging    CallStatus = "ringing"
	CallStatusInProgress CallStatus = "in-progress"
	CallStatusForwarding CallStatus = "forwarding"
	CallStatusEnded      CallStatus = "ended"
)

func NewCallStatusFromString(s string) (CallStatus, error) {
	switch s {
	case "scheduled":
		return CallStatusScheduled, nil
	case "queued":
		return CallStatusQueued, nil
	case "ringing":
		return CallStatusRinging, nil
	case "in-progress":
		return CallStatusInProgress, nil
	case "forwarding":
		return CallStatusForwarding, nil
	case "ended":
		return CallStatusEnded, nil
	}
	var t CallStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CallStatus) Ptr() *CallStatus {
	return &c
}

// This is the type of call.
type CallType string

const (
	CallTypeInboundPhoneCall  CallType = "inboundPhoneCall"
	CallTypeOutboundPhoneCall CallType = "outboundPhoneCall"
	CallTypeWebCall           CallType = "webCall"
	CallTypeVapiWebsocketCall CallType = "vapi.websocketCall"
)

func NewCallTypeFromString(s string) (CallType, error) {
	switch s {
	case "inboundPhoneCall":
		return CallTypeInboundPhoneCall, nil
	case "outboundPhoneCall":
		return CallTypeOutboundPhoneCall, nil
	case "webCall":
		return CallTypeWebCall, nil
	case "vapi.websocketCall":
		return CallTypeVapiWebsocketCall, nil
	}
	var t CallType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CallType) Ptr() *CallType {
	return &c
}

type CostBreakdown struct {
	// This is the cost of the transport provider, like Twilio or Vonage.
	Transport *float64 `json:"transport,omitempty" url:"transport,omitempty"`
	// This is the cost of the speech-to-text service.
	Stt *float64 `json:"stt,omitempty" url:"stt,omitempty"`
	// This is the cost of the language model.
	Llm *float64 `json:"llm,omitempty" url:"llm,omitempty"`
	// This is the cost of the text-to-speech service.
	Tts *float64 `json:"tts,omitempty" url:"tts,omitempty"`
	// This is the cost of Vapi.
	Vapi *float64 `json:"vapi,omitempty" url:"vapi,omitempty"`
	// This is the cost of chat interactions.
	Chat *float64 `json:"chat,omitempty" url:"chat,omitempty"`
	// This is the total cost of the call.
	Total *float64 `json:"total,omitempty" url:"total,omitempty"`
	// This is the LLM prompt tokens used for the call.
	LlmPromptTokens *float64 `json:"llmPromptTokens,omitempty" url:"llmPromptTokens,omitempty"`
	// This is the LLM completion tokens used for the call.
	LlmCompletionTokens *float64 `json:"llmCompletionTokens,omitempty" url:"llmCompletionTokens,omitempty"`
	// This is the TTS characters used for the call.
	TtsCharacters *float64 `json:"ttsCharacters,omitempty" url:"ttsCharacters,omitempty"`
	// This is the cost of the analysis.
	AnalysisCostBreakdown *AnalysisCostBreakdown `json:"analysisCostBreakdown,omitempty" url:"analysisCostBreakdown,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CostBreakdown) GetTransport() *float64 {
	if c == nil {
		return nil
	}
	return c.Transport
}

func (c *CostBreakdown) GetStt() *float64 {
	if c == nil {
		return nil
	}
	return c.Stt
}

func (c *CostBreakdown) GetLlm() *float64 {
	if c == nil {
		return nil
	}
	return c.Llm
}

func (c *CostBreakdown) GetTts() *float64 {
	if c == nil {
		return nil
	}
	return c.Tts
}

func (c *CostBreakdown) GetVapi() *float64 {
	if c == nil {
		return nil
	}
	return c.Vapi
}

func (c *CostBreakdown) GetChat() *float64 {
	if c == nil {
		return nil
	}
	return c.Chat
}

func (c *CostBreakdown) GetTotal() *float64 {
	if c == nil {
		return nil
	}
	return c.Total
}

func (c *CostBreakdown) GetLlmPromptTokens() *float64 {
	if c == nil {
		return nil
	}
	return c.LlmPromptTokens
}

func (c *CostBreakdown) GetLlmCompletionTokens() *float64 {
	if c == nil {
		return nil
	}
	return c.LlmCompletionTokens
}

func (c *CostBreakdown) GetTtsCharacters() *float64 {
	if c == nil {
		return nil
	}
	return c.TtsCharacters
}

func (c *CostBreakdown) GetAnalysisCostBreakdown() *AnalysisCostBreakdown {
	if c == nil {
		return nil
	}
	return c.AnalysisCostBreakdown
}

func (c *CostBreakdown) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CostBreakdown) UnmarshalJSON(data []byte) error {
	type unmarshaler CostBreakdown
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CostBreakdown(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CostBreakdown) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type KnowledgeBaseCost struct {
	// This is the type of cost, always 'knowledge-base' for this class.
	// This is the model that was used for processing the knowledge base.
	Model map[string]interface{} `json:"model" url:"model"`
	// This is the number of prompt tokens used in the knowledge base query.
	PromptTokens float64 `json:"promptTokens" url:"promptTokens"`
	// This is the number of completion tokens generated in the knowledge base query.
	CompletionTokens float64 `json:"completionTokens" url:"completionTokens"`
	// This is the cost of the component in USD.
	Cost  float64 `json:"cost" url:"cost"`
	type_ string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (k *KnowledgeBaseCost) GetModel() map[string]interface{} {
	if k == nil {
		return nil
	}
	return k.Model
}

func (k *KnowledgeBaseCost) GetPromptTokens() float64 {
	if k == nil {
		return 0
	}
	return k.PromptTokens
}

func (k *KnowledgeBaseCost) GetCompletionTokens() float64 {
	if k == nil {
		return 0
	}
	return k.CompletionTokens
}

func (k *KnowledgeBaseCost) GetCost() float64 {
	if k == nil {
		return 0
	}
	return k.Cost
}

func (k *KnowledgeBaseCost) Type() string {
	return k.type_
}

func (k *KnowledgeBaseCost) GetExtraProperties() map[string]interface{} {
	return k.extraProperties
}

func (k *KnowledgeBaseCost) UnmarshalJSON(data []byte) error {
	type embed KnowledgeBaseCost
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*k),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*k = KnowledgeBaseCost(unmarshaler.embed)
	if unmarshaler.Type != "knowledge-base" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", k, "knowledge-base", unmarshaler.Type)
	}
	k.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *k, "type")
	if err != nil {
		return err
	}
	k.extraProperties = extraProperties
	k.rawJSON = json.RawMessage(data)
	return nil
}

func (k *KnowledgeBaseCost) MarshalJSON() ([]byte, error) {
	type embed KnowledgeBaseCost
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*k),
		Type:  "knowledge-base",
	}
	return json.Marshal(marshaler)
}

func (k *KnowledgeBaseCost) String() string {
	if len(k.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(k.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(k); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", k)
}

type Monitor struct {
	// This is the URL where the assistant's calls can be listened to in real-time. To enable, set `assistant.monitorPlan.listenEnabled` to `true`.
	ListenUrl *string `json:"listenUrl,omitempty" url:"listenUrl,omitempty"`
	// This is the URL where the assistant's calls can be controlled in real-time. To enable, set `assistant.monitorPlan.controlEnabled` to `true`.
	ControlUrl *string `json:"controlUrl,omitempty" url:"controlUrl,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *Monitor) GetListenUrl() *string {
	if m == nil {
		return nil
	}
	return m.ListenUrl
}

func (m *Monitor) GetControlUrl() *string {
	if m == nil {
		return nil
	}
	return m.ControlUrl
}

func (m *Monitor) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *Monitor) UnmarshalJSON(data []byte) error {
	type unmarshaler Monitor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = Monitor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *Monitor) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type TranscriberCost struct {
	// This is the type of cost, always 'transcriber' for this class.
	// This is the transcriber that was used during the call.
	//
	// This matches one of the below:
	// - `call.assistant.transcriber`,
	// - `call.assistantId->transcriber`,
	// - `call.squad[n].assistant.transcriber`,
	// - `call.squad[n].assistantId->transcriber`,
	// - `call.squadId->[n].assistant.transcriber`,
	// - `call.squadId->[n].assistantId->transcriber`.
	Transcriber map[string]interface{} `json:"transcriber" url:"transcriber"`
	// This is the minutes of `transcriber` usage. This should match `call.endedAt` - `call.startedAt` for single assistant calls, while squad calls will have multiple transcriber costs one for each assistant that was used.
	Minutes float64 `json:"minutes" url:"minutes"`
	// This is the cost of the component in USD.
	Cost  float64 `json:"cost" url:"cost"`
	type_ string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TranscriberCost) GetTranscriber() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Transcriber
}

func (t *TranscriberCost) GetMinutes() float64 {
	if t == nil {
		return 0
	}
	return t.Minutes
}

func (t *TranscriberCost) GetCost() float64 {
	if t == nil {
		return 0
	}
	return t.Cost
}

func (t *TranscriberCost) Type() string {
	return t.type_
}

func (t *TranscriberCost) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TranscriberCost) UnmarshalJSON(data []byte) error {
	type embed TranscriberCost
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TranscriberCost(unmarshaler.embed)
	if unmarshaler.Type != "transcriber" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "transcriber", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TranscriberCost) MarshalJSON() ([]byte, error) {
	type embed TranscriberCost
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "transcriber",
	}
	return json.Marshal(marshaler)
}

func (t *TranscriberCost) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TransportCost struct {
	// This is the type of cost, always 'transport' for this class.
	Provider *TransportCostProvider `json:"provider,omitempty" url:"provider,omitempty"`
	// This is the minutes of `transport` usage. This should match `call.endedAt` - `call.startedAt`.
	Minutes float64 `json:"minutes" url:"minutes"`
	// This is the cost of the component in USD.
	Cost  float64 `json:"cost" url:"cost"`
	type_ string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransportCost) GetProvider() *TransportCostProvider {
	if t == nil {
		return nil
	}
	return t.Provider
}

func (t *TransportCost) GetMinutes() float64 {
	if t == nil {
		return 0
	}
	return t.Minutes
}

func (t *TransportCost) GetCost() float64 {
	if t == nil {
		return 0
	}
	return t.Cost
}

func (t *TransportCost) Type() string {
	return t.type_
}

func (t *TransportCost) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransportCost) UnmarshalJSON(data []byte) error {
	type embed TransportCost
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TransportCost(unmarshaler.embed)
	if unmarshaler.Type != "transport" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "transport", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransportCost) MarshalJSON() ([]byte, error) {
	type embed TransportCost
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "transport",
	}
	return json.Marshal(marshaler)
}

func (t *TransportCost) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TransportCostProvider string

const (
	TransportCostProviderTwilio TransportCostProvider = "twilio"
	TransportCostProviderVonage TransportCostProvider = "vonage"
	TransportCostProviderVapi   TransportCostProvider = "vapi"
)

func NewTransportCostProviderFromString(s string) (TransportCostProvider, error) {
	switch s {
	case "twilio":
		return TransportCostProviderTwilio, nil
	case "vonage":
		return TransportCostProviderVonage, nil
	case "vapi":
		return TransportCostProviderVapi, nil
	}
	var t TransportCostProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TransportCostProvider) Ptr() *TransportCostProvider {
	return &t
}

type VapiCost struct {
	// This is the type of cost, always 'vapi' for this class.
	// This is the sub type of the cost.
	SubType VapiCostSubType `json:"subType" url:"subType"`
	// This is the minutes of Vapi usage. This should match `call.endedAt` - `call.startedAt`.
	Minutes float64 `json:"minutes" url:"minutes"`
	// This is the cost of the component in USD.
	Cost  float64 `json:"cost" url:"cost"`
	type_ string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VapiCost) GetSubType() VapiCostSubType {
	if v == nil {
		return ""
	}
	return v.SubType
}

func (v *VapiCost) GetMinutes() float64 {
	if v == nil {
		return 0
	}
	return v.Minutes
}

func (v *VapiCost) GetCost() float64 {
	if v == nil {
		return 0
	}
	return v.Cost
}

func (v *VapiCost) Type() string {
	return v.type_
}

func (v *VapiCost) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VapiCost) UnmarshalJSON(data []byte) error {
	type embed VapiCost
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VapiCost(unmarshaler.embed)
	if unmarshaler.Type != "vapi" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "vapi", unmarshaler.Type)
	}
	v.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *v, "type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VapiCost) MarshalJSON() ([]byte, error) {
	type embed VapiCost
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
		Type:  "vapi",
	}
	return json.Marshal(marshaler)
}

func (v *VapiCost) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// This is the sub type of the cost.
type VapiCostSubType string

const (
	VapiCostSubTypeNormal  VapiCostSubType = "normal"
	VapiCostSubTypeOverage VapiCostSubType = "overage"
)

func NewVapiCostSubTypeFromString(s string) (VapiCostSubType, error) {
	switch s {
	case "normal":
		return VapiCostSubTypeNormal, nil
	case "overage":
		return VapiCostSubTypeOverage, nil
	}
	var t VapiCostSubType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VapiCostSubType) Ptr() *VapiCostSubType {
	return &v
}

type VoiceCost struct {
	// This is the type of cost, always 'voice' for this class.
	// This is the voice that was used during the call.
	//
	// This matches one of the following:
	// - `call.assistant.voice`,
	// - `call.assistantId->voice`,
	// - `call.squad[n].assistant.voice`,
	// - `call.squad[n].assistantId->voice`,
	// - `call.squadId->[n].assistant.voice`,
	// - `call.squadId->[n].assistantId->voice`.
	Voice map[string]interface{} `json:"voice" url:"voice"`
	// This is the number of characters that were generated during the call. These should be total characters used in the call for single assistant calls, while squad calls will have multiple voice costs one for each assistant that was used.
	Characters float64 `json:"characters" url:"characters"`
	// This is the cost of the component in USD.
	Cost  float64 `json:"cost" url:"cost"`
	type_ string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VoiceCost) GetVoice() map[string]interface{} {
	if v == nil {
		return nil
	}
	return v.Voice
}

func (v *VoiceCost) GetCharacters() float64 {
	if v == nil {
		return 0
	}
	return v.Characters
}

func (v *VoiceCost) GetCost() float64 {
	if v == nil {
		return 0
	}
	return v.Cost
}

func (v *VoiceCost) Type() string {
	return v.type_
}

func (v *VoiceCost) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VoiceCost) UnmarshalJSON(data []byte) error {
	type embed VoiceCost
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VoiceCost(unmarshaler.embed)
	if unmarshaler.Type != "voice" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "voice", unmarshaler.Type)
	}
	v.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *v, "type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VoiceCost) MarshalJSON() ([]byte, error) {
	type embed VoiceCost
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
		Type:  "voice",
	}
	return json.Marshal(marshaler)
}

func (v *VoiceCost) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VoicemailDetectionCost struct {
	// This is the type of cost, always 'voicemail-detection' for this class.
	// This is the model that was used to perform the analysis.
	Model map[string]interface{} `json:"model" url:"model"`
	// This is the provider that was used to detect the voicemail.
	Provider VoicemailDetectionCostProvider `json:"provider" url:"provider"`
	// This is the number of prompt text tokens used in the voicemail detection.
	PromptTextTokens float64 `json:"promptTextTokens" url:"promptTextTokens"`
	// This is the number of prompt audio tokens used in the voicemail detection.
	PromptAudioTokens float64 `json:"promptAudioTokens" url:"promptAudioTokens"`
	// This is the number of completion text tokens used in the voicemail detection.
	CompletionTextTokens float64 `json:"completionTextTokens" url:"completionTextTokens"`
	// This is the number of completion audio tokens used in the voicemail detection.
	CompletionAudioTokens float64 `json:"completionAudioTokens" url:"completionAudioTokens"`
	// This is the cost of the component in USD.
	Cost  float64 `json:"cost" url:"cost"`
	type_ string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VoicemailDetectionCost) GetModel() map[string]interface{} {
	if v == nil {
		return nil
	}
	return v.Model
}

func (v *VoicemailDetectionCost) GetProvider() VoicemailDetectionCostProvider {
	if v == nil {
		return ""
	}
	return v.Provider
}

func (v *VoicemailDetectionCost) GetPromptTextTokens() float64 {
	if v == nil {
		return 0
	}
	return v.PromptTextTokens
}

func (v *VoicemailDetectionCost) GetPromptAudioTokens() float64 {
	if v == nil {
		return 0
	}
	return v.PromptAudioTokens
}

func (v *VoicemailDetectionCost) GetCompletionTextTokens() float64 {
	if v == nil {
		return 0
	}
	return v.CompletionTextTokens
}

func (v *VoicemailDetectionCost) GetCompletionAudioTokens() float64 {
	if v == nil {
		return 0
	}
	return v.CompletionAudioTokens
}

func (v *VoicemailDetectionCost) GetCost() float64 {
	if v == nil {
		return 0
	}
	return v.Cost
}

func (v *VoicemailDetectionCost) Type() string {
	return v.type_
}

func (v *VoicemailDetectionCost) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VoicemailDetectionCost) UnmarshalJSON(data []byte) error {
	type embed VoicemailDetectionCost
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VoicemailDetectionCost(unmarshaler.embed)
	if unmarshaler.Type != "voicemail-detection" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "voicemail-detection", unmarshaler.Type)
	}
	v.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *v, "type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VoicemailDetectionCost) MarshalJSON() ([]byte, error) {
	type embed VoicemailDetectionCost
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
		Type:  "voicemail-detection",
	}
	return json.Marshal(marshaler)
}

func (v *VoicemailDetectionCost) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// This is the provider that was used to detect the voicemail.
type VoicemailDetectionCostProvider string

const (
	VoicemailDetectionCostProviderTwilio VoicemailDetectionCostProvider = "twilio"
	VoicemailDetectionCostProviderGoogle VoicemailDetectionCostProvider = "google"
	VoicemailDetectionCostProviderOpenai VoicemailDetectionCostProvider = "openai"
	VoicemailDetectionCostProviderVapi   VoicemailDetectionCostProvider = "vapi"
)

func NewVoicemailDetectionCostProviderFromString(s string) (VoicemailDetectionCostProvider, error) {
	switch s {
	case "twilio":
		return VoicemailDetectionCostProviderTwilio, nil
	case "google":
		return VoicemailDetectionCostProviderGoogle, nil
	case "openai":
		return VoicemailDetectionCostProviderOpenai, nil
	case "vapi":
		return VoicemailDetectionCostProviderVapi, nil
	}
	var t VoicemailDetectionCostProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VoicemailDetectionCostProvider) Ptr() *VoicemailDetectionCostProvider {
	return &v
}

type WorkflowOverrides struct {
	// These are values that will be used to replace the template variables in the workflow messages and other text-based fields.
	// This uses LiquidJS syntax. https://liquidjs.com/tutorials/intro-to-liquid.html
	//
	// So for example, `{{ name }}` will be replaced with the value of `name` in `variableValues`.
	// `{{"now" | date: "%b %d, %Y, %I:%M %p", "America/New_York"}}` will be replaced with the current date and time in New York.
	//
	//	Some VAPI reserved defaults:
	//	- *customer* - the customer object
	VariableValues map[string]interface{} `json:"variableValues,omitempty" url:"variableValues,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WorkflowOverrides) GetVariableValues() map[string]interface{} {
	if w == nil {
		return nil
	}
	return w.VariableValues
}

func (w *WorkflowOverrides) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOverrides) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOverrides
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOverrides(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOverrides) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type CallsCreateResponse struct {
	Call              *Call
	CallBatchResponse *CallBatchResponse

	typ string
}

func (c *CallsCreateResponse) GetCall() *Call {
	if c == nil {
		return nil
	}
	return c.Call
}

func (c *CallsCreateResponse) GetCallBatchResponse() *CallBatchResponse {
	if c == nil {
		return nil
	}
	return c.CallBatchResponse
}

func (c *CallsCreateResponse) UnmarshalJSON(data []byte) error {
	valueCall := new(Call)
	if err := json.Unmarshal(data, &valueCall); err == nil {
		c.typ = "Call"
		c.Call = valueCall
		return nil
	}
	valueCallBatchResponse := new(CallBatchResponse)
	if err := json.Unmarshal(data, &valueCallBatchResponse); err == nil {
		c.typ = "CallBatchResponse"
		c.CallBatchResponse = valueCallBatchResponse
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CallsCreateResponse) MarshalJSON() ([]byte, error) {
	if c.typ == "Call" || c.Call != nil {
		return json.Marshal(c.Call)
	}
	if c.typ == "CallBatchResponse" || c.CallBatchResponse != nil {
		return json.Marshal(c.CallBatchResponse)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CallsCreateResponseVisitor interface {
	VisitCall(*Call) error
	VisitCallBatchResponse(*CallBatchResponse) error
}

func (c *CallsCreateResponse) Accept(visitor CallsCreateResponseVisitor) error {
	if c.typ == "Call" || c.Call != nil {
		return visitor.VisitCall(c.Call)
	}
	if c.typ == "CallBatchResponse" || c.CallBatchResponse != nil {
		return visitor.VisitCallBatchResponse(c.CallBatchResponse)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type UpdateCallDto struct {
	// This is the name of the call. This is just for your own reference.
	Name *string `json:"name,omitempty" url:"-"`
}
